
New_Ultra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005d00  08005d00  00006d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df4  08005df4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005df4  08005df4  00006df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dfc  08005dfc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dfc  08005dfc  00006dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e00  08005e00  00006e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005e04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000003ac  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000408  20000408  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceb4  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b36  00000000  00000000  00013f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00015a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ec  00000000  00000000  00016710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222cc  00000000  00000000  000170fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2e4  00000000  00000000  000393c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d78ac  00000000  00000000  000476ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ef58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c5c  00000000  00000000  0011ef9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00122bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ce8 	.word	0x08005ce8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005ce8 	.word	0x08005ce8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	@ 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	3a01      	subs	r2, #1
 8000b16:	bf28      	it	cs
 8000b18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b1c:	d2ed      	bcs.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_fmul>:
 8000c78:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c80:	bf1e      	ittt	ne
 8000c82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c86:	ea92 0f0c 	teqne	r2, ip
 8000c8a:	ea93 0f0c 	teqne	r3, ip
 8000c8e:	d06f      	beq.n	8000d70 <__aeabi_fmul+0xf8>
 8000c90:	441a      	add	r2, r3
 8000c92:	ea80 0c01 	eor.w	ip, r0, r1
 8000c96:	0240      	lsls	r0, r0, #9
 8000c98:	bf18      	it	ne
 8000c9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c9e:	d01e      	beq.n	8000cde <__aeabi_fmul+0x66>
 8000ca0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ca4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ca8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cac:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cb4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cb8:	bf3e      	ittt	cc
 8000cba:	0049      	lslcc	r1, r1, #1
 8000cbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc0:	005b      	lslcc	r3, r3, #1
 8000cc2:	ea40 0001 	orr.w	r0, r0, r1
 8000cc6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cca:	2afd      	cmp	r2, #253	@ 0xfd
 8000ccc:	d81d      	bhi.n	8000d0a <__aeabi_fmul+0x92>
 8000cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	4770      	bx	lr
 8000cde:	f090 0f00 	teq	r0, #0
 8000ce2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ce6:	bf08      	it	eq
 8000ce8:	0249      	lsleq	r1, r1, #9
 8000cea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cf2:	3a7f      	subs	r2, #127	@ 0x7f
 8000cf4:	bfc2      	ittt	gt
 8000cf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cfe:	4770      	bxgt	lr
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	dc5d      	bgt.n	8000dc8 <__aeabi_fmul+0x150>
 8000d0c:	f112 0f19 	cmn.w	r2, #25
 8000d10:	bfdc      	itt	le
 8000d12:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d16:	4770      	bxle	lr
 8000d18:	f1c2 0200 	rsb	r2, r2, #0
 8000d1c:	0041      	lsls	r1, r0, #1
 8000d1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d22:	f1c2 0220 	rsb	r2, r2, #32
 8000d26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d2e:	f140 0000 	adc.w	r0, r0, #0
 8000d32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d36:	bf08      	it	eq
 8000d38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3c:	4770      	bx	lr
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d46:	bf02      	ittt	eq
 8000d48:	0040      	lsleq	r0, r0, #1
 8000d4a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d4e:	3a01      	subeq	r2, #1
 8000d50:	d0f9      	beq.n	8000d46 <__aeabi_fmul+0xce>
 8000d52:	ea40 000c 	orr.w	r0, r0, ip
 8000d56:	f093 0f00 	teq	r3, #0
 8000d5a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0049      	lsleq	r1, r1, #1
 8000d62:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d66:	3b01      	subeq	r3, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xe6>
 8000d6a:	ea41 010c 	orr.w	r1, r1, ip
 8000d6e:	e78f      	b.n	8000c90 <__aeabi_fmul+0x18>
 8000d70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d74:	ea92 0f0c 	teq	r2, ip
 8000d78:	bf18      	it	ne
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d00a      	beq.n	8000d96 <__aeabi_fmul+0x11e>
 8000d80:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d84:	bf18      	it	ne
 8000d86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	d1d8      	bne.n	8000d3e <__aeabi_fmul+0xc6>
 8000d8c:	ea80 0001 	eor.w	r0, r0, r1
 8000d90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	bf17      	itett	ne
 8000d9c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000da0:	4608      	moveq	r0, r1
 8000da2:	f091 0f00 	teqne	r1, #0
 8000da6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000daa:	d014      	beq.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d101      	bne.n	8000db6 <__aeabi_fmul+0x13e>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	d10f      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000db6:	ea93 0f0c 	teq	r3, ip
 8000dba:	d103      	bne.n	8000dc4 <__aeabi_fmul+0x14c>
 8000dbc:	024b      	lsls	r3, r1, #9
 8000dbe:	bf18      	it	ne
 8000dc0:	4608      	movne	r0, r1
 8000dc2:	d108      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dcc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bx	lr
 8000dd6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dda:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fdiv>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d069      	beq.n	8000ecc <__aeabi_fdiv+0xec>
 8000df8:	eba2 0203 	sub.w	r2, r2, r3
 8000dfc:	ea80 0c01 	eor.w	ip, r0, r1
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e06:	d037      	beq.n	8000e78 <__aeabi_fdiv+0x98>
 8000e08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e14:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	bf38      	it	cc
 8000e1c:	005b      	lslcc	r3, r3, #1
 8000e1e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e22:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e26:	428b      	cmp	r3, r1
 8000e28:	bf24      	itt	cs
 8000e2a:	1a5b      	subcs	r3, r3, r1
 8000e2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e34:	bf24      	itt	cs
 8000e36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e42:	bf24      	itt	cs
 8000e44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	bf18      	it	ne
 8000e5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e62:	d1e0      	bne.n	8000e26 <__aeabi_fdiv+0x46>
 8000e64:	2afd      	cmp	r2, #253	@ 0xfd
 8000e66:	f63f af50 	bhi.w	8000d0a <__aeabi_fmul+0x92>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e70:	bf08      	it	eq
 8000e72:	f020 0001 	biceq.w	r0, r0, #1
 8000e76:	4770      	bx	lr
 8000e78:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e80:	327f      	adds	r2, #127	@ 0x7f
 8000e82:	bfc2      	ittt	gt
 8000e84:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8c:	4770      	bxgt	lr
 8000e8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	3a01      	subs	r2, #1
 8000e98:	e737      	b.n	8000d0a <__aeabi_fmul+0x92>
 8000e9a:	f092 0f00 	teq	r2, #0
 8000e9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0040      	lsleq	r0, r0, #1
 8000ea6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eaa:	3a01      	subeq	r2, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fdiv+0xc2>
 8000eae:	ea40 000c 	orr.w	r0, r0, ip
 8000eb2:	f093 0f00 	teq	r3, #0
 8000eb6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0049      	lsleq	r1, r1, #1
 8000ebe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ec2:	3b01      	subeq	r3, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xda>
 8000ec6:	ea41 010c 	orr.w	r1, r1, ip
 8000eca:	e795      	b.n	8000df8 <__aeabi_fdiv+0x18>
 8000ecc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed0:	ea92 0f0c 	teq	r2, ip
 8000ed4:	d108      	bne.n	8000ee8 <__aeabi_fdiv+0x108>
 8000ed6:	0242      	lsls	r2, r0, #9
 8000ed8:	f47f af7d 	bne.w	8000dd6 <__aeabi_fmul+0x15e>
 8000edc:	ea93 0f0c 	teq	r3, ip
 8000ee0:	f47f af70 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e776      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	d104      	bne.n	8000ef8 <__aeabi_fdiv+0x118>
 8000eee:	024b      	lsls	r3, r1, #9
 8000ef0:	f43f af4c 	beq.w	8000d8c <__aeabi_fmul+0x114>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e76e      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000efc:	bf18      	it	ne
 8000efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f02:	d1ca      	bne.n	8000e9a <__aeabi_fdiv+0xba>
 8000f04:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f08:	f47f af5c 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000f0c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f10:	f47f af3c 	bne.w	8000d8c <__aeabi_fmul+0x114>
 8000f14:	e75f      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000f16:	bf00      	nop

08000f18 <__aeabi_f2uiz>:
 8000f18:	0042      	lsls	r2, r0, #1
 8000f1a:	d20e      	bcs.n	8000f3a <__aeabi_f2uiz+0x22>
 8000f1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f20:	d30b      	bcc.n	8000f3a <__aeabi_f2uiz+0x22>
 8000f22:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f2a:	d409      	bmi.n	8000f40 <__aeabi_f2uiz+0x28>
 8000f2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f34:	fa23 f002 	lsr.w	r0, r3, r2
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr
 8000f40:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f44:	d101      	bne.n	8000f4a <__aeabi_f2uiz+0x32>
 8000f46:	0242      	lsls	r2, r0, #9
 8000f48:	d102      	bne.n	8000f50 <__aeabi_f2uiz+0x38>
 8000f4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f4e:	4770      	bx	lr
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__aeabi_uldivmod>:
 8000f58:	b953      	cbnz	r3, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5a:	b94a      	cbnz	r2, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	bf08      	it	eq
 8000f60:	2800      	cmpeq	r0, #0
 8000f62:	bf1c      	itt	ne
 8000f64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f6c:	f000 b96a 	b.w	8001244 <__aeabi_idiv0>
 8000f70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f78:	f000 f806 	bl	8000f88 <__udivmoddi4>
 8000f7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr

08000f88 <__udivmoddi4>:
 8000f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f8c:	9d08      	ldr	r5, [sp, #32]
 8000f8e:	460c      	mov	r4, r1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d14e      	bne.n	8001032 <__udivmoddi4+0xaa>
 8000f94:	4694      	mov	ip, r2
 8000f96:	458c      	cmp	ip, r1
 8000f98:	4686      	mov	lr, r0
 8000f9a:	fab2 f282 	clz	r2, r2
 8000f9e:	d962      	bls.n	8001066 <__udivmoddi4+0xde>
 8000fa0:	b14a      	cbz	r2, 8000fb6 <__udivmoddi4+0x2e>
 8000fa2:	f1c2 0320 	rsb	r3, r2, #32
 8000fa6:	4091      	lsls	r1, r2
 8000fa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000fac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb0:	4319      	orrs	r1, r3
 8000fb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fba:	fa1f f68c 	uxth.w	r6, ip
 8000fbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000fca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fce:	fb04 f106 	mul.w	r1, r4, r6
 8000fd2:	4299      	cmp	r1, r3
 8000fd4:	d90a      	bls.n	8000fec <__udivmoddi4+0x64>
 8000fd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000fde:	f080 8112 	bcs.w	8001206 <__udivmoddi4+0x27e>
 8000fe2:	4299      	cmp	r1, r3
 8000fe4:	f240 810f 	bls.w	8001206 <__udivmoddi4+0x27e>
 8000fe8:	3c02      	subs	r4, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	1a59      	subs	r1, r3, r1
 8000fee:	fa1f f38e 	uxth.w	r3, lr
 8000ff2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff6:	fb07 1110 	mls	r1, r7, r0, r1
 8000ffa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ffe:	fb00 f606 	mul.w	r6, r0, r6
 8001002:	429e      	cmp	r6, r3
 8001004:	d90a      	bls.n	800101c <__udivmoddi4+0x94>
 8001006:	eb1c 0303 	adds.w	r3, ip, r3
 800100a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800100e:	f080 80fc 	bcs.w	800120a <__udivmoddi4+0x282>
 8001012:	429e      	cmp	r6, r3
 8001014:	f240 80f9 	bls.w	800120a <__udivmoddi4+0x282>
 8001018:	4463      	add	r3, ip
 800101a:	3802      	subs	r0, #2
 800101c:	1b9b      	subs	r3, r3, r6
 800101e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001022:	2100      	movs	r1, #0
 8001024:	b11d      	cbz	r5, 800102e <__udivmoddi4+0xa6>
 8001026:	40d3      	lsrs	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	e9c5 3200 	strd	r3, r2, [r5]
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	428b      	cmp	r3, r1
 8001034:	d905      	bls.n	8001042 <__udivmoddi4+0xba>
 8001036:	b10d      	cbz	r5, 800103c <__udivmoddi4+0xb4>
 8001038:	e9c5 0100 	strd	r0, r1, [r5]
 800103c:	2100      	movs	r1, #0
 800103e:	4608      	mov	r0, r1
 8001040:	e7f5      	b.n	800102e <__udivmoddi4+0xa6>
 8001042:	fab3 f183 	clz	r1, r3
 8001046:	2900      	cmp	r1, #0
 8001048:	d146      	bne.n	80010d8 <__udivmoddi4+0x150>
 800104a:	42a3      	cmp	r3, r4
 800104c:	d302      	bcc.n	8001054 <__udivmoddi4+0xcc>
 800104e:	4290      	cmp	r0, r2
 8001050:	f0c0 80f0 	bcc.w	8001234 <__udivmoddi4+0x2ac>
 8001054:	1a86      	subs	r6, r0, r2
 8001056:	eb64 0303 	sbc.w	r3, r4, r3
 800105a:	2001      	movs	r0, #1
 800105c:	2d00      	cmp	r5, #0
 800105e:	d0e6      	beq.n	800102e <__udivmoddi4+0xa6>
 8001060:	e9c5 6300 	strd	r6, r3, [r5]
 8001064:	e7e3      	b.n	800102e <__udivmoddi4+0xa6>
 8001066:	2a00      	cmp	r2, #0
 8001068:	f040 8090 	bne.w	800118c <__udivmoddi4+0x204>
 800106c:	eba1 040c 	sub.w	r4, r1, ip
 8001070:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001074:	fa1f f78c 	uxth.w	r7, ip
 8001078:	2101      	movs	r1, #1
 800107a:	fbb4 f6f8 	udiv	r6, r4, r8
 800107e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001082:	fb08 4416 	mls	r4, r8, r6, r4
 8001086:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800108a:	fb07 f006 	mul.w	r0, r7, r6
 800108e:	4298      	cmp	r0, r3
 8001090:	d908      	bls.n	80010a4 <__udivmoddi4+0x11c>
 8001092:	eb1c 0303 	adds.w	r3, ip, r3
 8001096:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800109a:	d202      	bcs.n	80010a2 <__udivmoddi4+0x11a>
 800109c:	4298      	cmp	r0, r3
 800109e:	f200 80cd 	bhi.w	800123c <__udivmoddi4+0x2b4>
 80010a2:	4626      	mov	r6, r4
 80010a4:	1a1c      	subs	r4, r3, r0
 80010a6:	fa1f f38e 	uxth.w	r3, lr
 80010aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80010ae:	fb08 4410 	mls	r4, r8, r0, r4
 80010b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010b6:	fb00 f707 	mul.w	r7, r0, r7
 80010ba:	429f      	cmp	r7, r3
 80010bc:	d908      	bls.n	80010d0 <__udivmoddi4+0x148>
 80010be:	eb1c 0303 	adds.w	r3, ip, r3
 80010c2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80010c6:	d202      	bcs.n	80010ce <__udivmoddi4+0x146>
 80010c8:	429f      	cmp	r7, r3
 80010ca:	f200 80b0 	bhi.w	800122e <__udivmoddi4+0x2a6>
 80010ce:	4620      	mov	r0, r4
 80010d0:	1bdb      	subs	r3, r3, r7
 80010d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010d6:	e7a5      	b.n	8001024 <__udivmoddi4+0x9c>
 80010d8:	f1c1 0620 	rsb	r6, r1, #32
 80010dc:	408b      	lsls	r3, r1
 80010de:	fa22 f706 	lsr.w	r7, r2, r6
 80010e2:	431f      	orrs	r7, r3
 80010e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80010e8:	fa04 f301 	lsl.w	r3, r4, r1
 80010ec:	ea43 030c 	orr.w	r3, r3, ip
 80010f0:	40f4      	lsrs	r4, r6
 80010f2:	fa00 f801 	lsl.w	r8, r0, r1
 80010f6:	0c38      	lsrs	r0, r7, #16
 80010f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010fc:	fbb4 fef0 	udiv	lr, r4, r0
 8001100:	fa1f fc87 	uxth.w	ip, r7
 8001104:	fb00 441e 	mls	r4, r0, lr, r4
 8001108:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800110c:	fb0e f90c 	mul.w	r9, lr, ip
 8001110:	45a1      	cmp	r9, r4
 8001112:	fa02 f201 	lsl.w	r2, r2, r1
 8001116:	d90a      	bls.n	800112e <__udivmoddi4+0x1a6>
 8001118:	193c      	adds	r4, r7, r4
 800111a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800111e:	f080 8084 	bcs.w	800122a <__udivmoddi4+0x2a2>
 8001122:	45a1      	cmp	r9, r4
 8001124:	f240 8081 	bls.w	800122a <__udivmoddi4+0x2a2>
 8001128:	f1ae 0e02 	sub.w	lr, lr, #2
 800112c:	443c      	add	r4, r7
 800112e:	eba4 0409 	sub.w	r4, r4, r9
 8001132:	fa1f f983 	uxth.w	r9, r3
 8001136:	fbb4 f3f0 	udiv	r3, r4, r0
 800113a:	fb00 4413 	mls	r4, r0, r3, r4
 800113e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001142:	fb03 fc0c 	mul.w	ip, r3, ip
 8001146:	45a4      	cmp	ip, r4
 8001148:	d907      	bls.n	800115a <__udivmoddi4+0x1d2>
 800114a:	193c      	adds	r4, r7, r4
 800114c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001150:	d267      	bcs.n	8001222 <__udivmoddi4+0x29a>
 8001152:	45a4      	cmp	ip, r4
 8001154:	d965      	bls.n	8001222 <__udivmoddi4+0x29a>
 8001156:	3b02      	subs	r3, #2
 8001158:	443c      	add	r4, r7
 800115a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800115e:	fba0 9302 	umull	r9, r3, r0, r2
 8001162:	eba4 040c 	sub.w	r4, r4, ip
 8001166:	429c      	cmp	r4, r3
 8001168:	46ce      	mov	lr, r9
 800116a:	469c      	mov	ip, r3
 800116c:	d351      	bcc.n	8001212 <__udivmoddi4+0x28a>
 800116e:	d04e      	beq.n	800120e <__udivmoddi4+0x286>
 8001170:	b155      	cbz	r5, 8001188 <__udivmoddi4+0x200>
 8001172:	ebb8 030e 	subs.w	r3, r8, lr
 8001176:	eb64 040c 	sbc.w	r4, r4, ip
 800117a:	fa04 f606 	lsl.w	r6, r4, r6
 800117e:	40cb      	lsrs	r3, r1
 8001180:	431e      	orrs	r6, r3
 8001182:	40cc      	lsrs	r4, r1
 8001184:	e9c5 6400 	strd	r6, r4, [r5]
 8001188:	2100      	movs	r1, #0
 800118a:	e750      	b.n	800102e <__udivmoddi4+0xa6>
 800118c:	f1c2 0320 	rsb	r3, r2, #32
 8001190:	fa20 f103 	lsr.w	r1, r0, r3
 8001194:	fa0c fc02 	lsl.w	ip, ip, r2
 8001198:	fa24 f303 	lsr.w	r3, r4, r3
 800119c:	4094      	lsls	r4, r2
 800119e:	430c      	orrs	r4, r1
 80011a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80011a8:	fa1f f78c 	uxth.w	r7, ip
 80011ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b0:	fb08 3110 	mls	r1, r8, r0, r3
 80011b4:	0c23      	lsrs	r3, r4, #16
 80011b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ba:	fb00 f107 	mul.w	r1, r0, r7
 80011be:	4299      	cmp	r1, r3
 80011c0:	d908      	bls.n	80011d4 <__udivmoddi4+0x24c>
 80011c2:	eb1c 0303 	adds.w	r3, ip, r3
 80011c6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80011ca:	d22c      	bcs.n	8001226 <__udivmoddi4+0x29e>
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d92a      	bls.n	8001226 <__udivmoddi4+0x29e>
 80011d0:	3802      	subs	r0, #2
 80011d2:	4463      	add	r3, ip
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	b2a4      	uxth	r4, r4
 80011d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80011dc:	fb08 3311 	mls	r3, r8, r1, r3
 80011e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011e4:	fb01 f307 	mul.w	r3, r1, r7
 80011e8:	42a3      	cmp	r3, r4
 80011ea:	d908      	bls.n	80011fe <__udivmoddi4+0x276>
 80011ec:	eb1c 0404 	adds.w	r4, ip, r4
 80011f0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80011f4:	d213      	bcs.n	800121e <__udivmoddi4+0x296>
 80011f6:	42a3      	cmp	r3, r4
 80011f8:	d911      	bls.n	800121e <__udivmoddi4+0x296>
 80011fa:	3902      	subs	r1, #2
 80011fc:	4464      	add	r4, ip
 80011fe:	1ae4      	subs	r4, r4, r3
 8001200:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001204:	e739      	b.n	800107a <__udivmoddi4+0xf2>
 8001206:	4604      	mov	r4, r0
 8001208:	e6f0      	b.n	8000fec <__udivmoddi4+0x64>
 800120a:	4608      	mov	r0, r1
 800120c:	e706      	b.n	800101c <__udivmoddi4+0x94>
 800120e:	45c8      	cmp	r8, r9
 8001210:	d2ae      	bcs.n	8001170 <__udivmoddi4+0x1e8>
 8001212:	ebb9 0e02 	subs.w	lr, r9, r2
 8001216:	eb63 0c07 	sbc.w	ip, r3, r7
 800121a:	3801      	subs	r0, #1
 800121c:	e7a8      	b.n	8001170 <__udivmoddi4+0x1e8>
 800121e:	4631      	mov	r1, r6
 8001220:	e7ed      	b.n	80011fe <__udivmoddi4+0x276>
 8001222:	4603      	mov	r3, r0
 8001224:	e799      	b.n	800115a <__udivmoddi4+0x1d2>
 8001226:	4630      	mov	r0, r6
 8001228:	e7d4      	b.n	80011d4 <__udivmoddi4+0x24c>
 800122a:	46d6      	mov	lr, sl
 800122c:	e77f      	b.n	800112e <__udivmoddi4+0x1a6>
 800122e:	4463      	add	r3, ip
 8001230:	3802      	subs	r0, #2
 8001232:	e74d      	b.n	80010d0 <__udivmoddi4+0x148>
 8001234:	4606      	mov	r6, r0
 8001236:	4623      	mov	r3, r4
 8001238:	4608      	mov	r0, r1
 800123a:	e70f      	b.n	800105c <__udivmoddi4+0xd4>
 800123c:	3e02      	subs	r6, #2
 800123e:	4463      	add	r3, ip
 8001240:	e730      	b.n	80010a4 <__udivmoddi4+0x11c>
 8001242:	bf00      	nop

08001244 <__aeabi_idiv0>:
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char *message = "This is Ultrasonic Reading's and LDR Demo....!!!!\r\n";
 800124e:	4b9e      	ldr	r3, [pc, #632]	@ (80014c8 <main+0x280>)
 8001250:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f000 fe0f 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f96d 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 fb9b 	bl	8001994 <MX_GPIO_Init>
  MX_TIM8_Init();
 800125e:	f000 fa9d 	bl	800179c <MX_TIM8_Init>
  MX_TIM11_Init();
 8001262:	f000 fb1f 	bl	80018a4 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8001266:	f000 fb6b 	bl	8001940 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800126a:	f000 fa1f 	bl	80016ac <MX_TIM3_Init>
  MX_ADC1_Init();
 800126e:	f000 f9cb 	bl	8001608 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);
 8001272:	4896      	ldr	r0, [pc, #600]	@ (80014cc <main+0x284>)
 8001274:	f002 f9de 	bl	8003634 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8001278:	4895      	ldr	r0, [pc, #596]	@ (80014d0 <main+0x288>)
 800127a:	f002 f9db 	bl	8003634 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800127e:	2100      	movs	r1, #0
 8001280:	4892      	ldr	r0, [pc, #584]	@ (80014cc <main+0x284>)
 8001282:	f002 fa95 	bl	80037b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	4892      	ldr	r0, [pc, #584]	@ (80014d4 <main+0x28c>)
 800128a:	f002 fa91 	bl	80037b0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 800128e:	2100      	movs	r1, #0
 8001290:	488f      	ldr	r0, [pc, #572]	@ (80014d0 <main+0x288>)
 8001292:	f002 fbad 	bl	80039f0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8001296:	2104      	movs	r1, #4
 8001298:	488d      	ldr	r0, [pc, #564]	@ (80014d0 <main+0x288>)
 800129a:	f002 fba9 	bl	80039f0 <HAL_TIM_IC_Start>

  HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7fe ff96 	bl	80001d0 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	488a      	ldr	r0, [pc, #552]	@ (80014d8 <main+0x290>)
 80012b0:	f003 fcb8 	bl	8004c24 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Send trigger pulse
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2101      	movs	r1, #1
 80012b8:	4888      	ldr	r0, [pc, #544]	@ (80014dc <main+0x294>)
 80012ba:	f001 fcb7 	bl	8002c2c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f000 fe46 	bl	8001f50 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	4884      	ldr	r0, [pc, #528]	@ (80014dc <main+0x294>)
 80012ca:	f001 fcaf 	bl	8002c2c <HAL_GPIO_WritePin>

    // Capture echo pulse
    echo1 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 80012ce:	2100      	movs	r1, #0
 80012d0:	487f      	ldr	r0, [pc, #508]	@ (80014d0 <main+0x288>)
 80012d2:	f002 fed1 	bl	8004078 <HAL_TIM_ReadCapturedValue>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a81      	ldr	r2, [pc, #516]	@ (80014e0 <main+0x298>)
 80012da:	6013      	str	r3, [r2, #0]
    echo2 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 80012dc:	2104      	movs	r1, #4
 80012de:	487c      	ldr	r0, [pc, #496]	@ (80014d0 <main+0x288>)
 80012e0:	f002 feca 	bl	8004078 <HAL_TIM_ReadCapturedValue>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a7f      	ldr	r2, [pc, #508]	@ (80014e4 <main+0x29c>)
 80012e8:	6013      	str	r3, [r2, #0]

    // Check if captured values are valid
    if (echo1 != 0 || echo2 != 0)
 80012ea:	4b7d      	ldr	r3, [pc, #500]	@ (80014e0 <main+0x298>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d103      	bne.n	80012fa <main+0xb2>
 80012f2:	4b7c      	ldr	r3, [pc, #496]	@ (80014e4 <main+0x29c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d06d      	beq.n	80013d6 <main+0x18e>
    {
      dist1 = echo1 / 58.0f;
 80012fa:	4b79      	ldr	r3, [pc, #484]	@ (80014e0 <main+0x298>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fc62 	bl	8000bc8 <__aeabi_ui2f>
 8001304:	4603      	mov	r3, r0
 8001306:	4978      	ldr	r1, [pc, #480]	@ (80014e8 <main+0x2a0>)
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd69 	bl	8000de0 <__aeabi_fdiv>
 800130e:	4603      	mov	r3, r0
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe01 	bl	8000f18 <__aeabi_f2uiz>
 8001316:	4603      	mov	r3, r0
 8001318:	4a74      	ldr	r2, [pc, #464]	@ (80014ec <main+0x2a4>)
 800131a:	6013      	str	r3, [r2, #0]
      dist2 = echo2 / 58.0f;
 800131c:	4b71      	ldr	r3, [pc, #452]	@ (80014e4 <main+0x29c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fc51 	bl	8000bc8 <__aeabi_ui2f>
 8001326:	4603      	mov	r3, r0
 8001328:	496f      	ldr	r1, [pc, #444]	@ (80014e8 <main+0x2a0>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fd58 	bl	8000de0 <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fdf0 	bl	8000f18 <__aeabi_f2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	4a6d      	ldr	r2, [pc, #436]	@ (80014f0 <main+0x2a8>)
 800133c:	6013      	str	r3, [r2, #0]
      main_dist = (dist2) * 0.034 / 2;
 800133e:	4b6c      	ldr	r3, [pc, #432]	@ (80014f0 <main+0x2a8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8de 	bl	8000504 <__aeabi_ui2d>
 8001348:	a35d      	add	r3, pc, #372	@ (adr r3, 80014c0 <main+0x278>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f953 	bl	80005f8 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001362:	f7ff fa73 	bl	800084c <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fb55 	bl	8000a1c <__aeabi_d2uiz>
 8001372:	4603      	mov	r3, r0
 8001374:	4a5f      	ldr	r2, [pc, #380]	@ (80014f4 <main+0x2ac>)
 8001376:	6013      	str	r3, [r2, #0]

      sprintf(str1, "ECHO 1=%lu\r\n", echo1);
 8001378:	4b59      	ldr	r3, [pc, #356]	@ (80014e0 <main+0x298>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	495e      	ldr	r1, [pc, #376]	@ (80014f8 <main+0x2b0>)
 8001380:	485e      	ldr	r0, [pc, #376]	@ (80014fc <main+0x2b4>)
 8001382:	f004 f811 	bl	80053a8 <siprintf>
      sprintf(str2, "ECHO 2=%lu\r\n", echo2);
 8001386:	4b57      	ldr	r3, [pc, #348]	@ (80014e4 <main+0x29c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	495c      	ldr	r1, [pc, #368]	@ (8001500 <main+0x2b8>)
 800138e:	485d      	ldr	r0, [pc, #372]	@ (8001504 <main+0x2bc>)
 8001390:	f004 f80a 	bl	80053a8 <siprintf>
      sprintf(str3, "DIST 1=%lu\r\n", dist1);
 8001394:	4b55      	ldr	r3, [pc, #340]	@ (80014ec <main+0x2a4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	495b      	ldr	r1, [pc, #364]	@ (8001508 <main+0x2c0>)
 800139c:	485b      	ldr	r0, [pc, #364]	@ (800150c <main+0x2c4>)
 800139e:	f004 f803 	bl	80053a8 <siprintf>
      sprintf(str4, "DIST 2=%lu\r\n", dist2);
 80013a2:	4b53      	ldr	r3, [pc, #332]	@ (80014f0 <main+0x2a8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4959      	ldr	r1, [pc, #356]	@ (8001510 <main+0x2c8>)
 80013aa:	485a      	ldr	r0, [pc, #360]	@ (8001514 <main+0x2cc>)
 80013ac:	f003 fffc 	bl	80053a8 <siprintf>
      sprintf(str5, "Main=%lu\r\n", main_dist);
 80013b0:	4b50      	ldr	r3, [pc, #320]	@ (80014f4 <main+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4958      	ldr	r1, [pc, #352]	@ (8001518 <main+0x2d0>)
 80013b8:	4858      	ldr	r0, [pc, #352]	@ (800151c <main+0x2d4>)
 80013ba:	f003 fff5 	bl	80053a8 <siprintf>

//      HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), HAL_MAX_DELAY);
//      HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), HAL_MAX_DELAY);
//    HAL_UART_Transmit(&huart2, (uint8_t *)str4, strlen(str4), HAL_MAX_DELAY);
      HAL_UART_Transmit(&huart2, (uint8_t *)str5, strlen(str5), HAL_MAX_DELAY);
 80013be:	4857      	ldr	r0, [pc, #348]	@ (800151c <main+0x2d4>)
 80013c0:	f7fe ff06 	bl	80001d0 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013cc:	4953      	ldr	r1, [pc, #332]	@ (800151c <main+0x2d4>)
 80013ce:	4842      	ldr	r0, [pc, #264]	@ (80014d8 <main+0x290>)
 80013d0:	f003 fc28 	bl	8004c24 <HAL_UART_Transmit>
 80013d4:	e00c      	b.n	80013f0 <main+0x1a8>
    }
    else
    {
      char *error_msg = "Error capturing echo\r\n";
 80013d6:	4b52      	ldr	r3, [pc, #328]	@ (8001520 <main+0x2d8>)
 80013d8:	603b      	str	r3, [r7, #0]
      HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f7fe fef8 	bl	80001d0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	483b      	ldr	r0, [pc, #236]	@ (80014d8 <main+0x290>)
 80013ec:	f003 fc1a 	bl	8004c24 <HAL_UART_Transmit>
    }

    HAL_Delay(100);  // Small delay to avoid overwhelming the UART with data
 80013f0:	2064      	movs	r0, #100	@ 0x64
 80013f2:	f000 fdad 	bl	8001f50 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_ADC_Start(&hadc1);
 80013f6:	484b      	ldr	r0, [pc, #300]	@ (8001524 <main+0x2dc>)
 80013f8:	f000 fe12 	bl	8002020 <HAL_ADC_Start>
 	   HAL_ADC_PollForConversion(&hadc1, 20);
 80013fc:	2114      	movs	r1, #20
 80013fe:	4849      	ldr	r0, [pc, #292]	@ (8001524 <main+0x2dc>)
 8001400:	f000 fee0 	bl	80021c4 <HAL_ADC_PollForConversion>
 	   val = HAL_ADC_GetValue(&hadc1);
 8001404:	4847      	ldr	r0, [pc, #284]	@ (8001524 <main+0x2dc>)
 8001406:	f000 ff68 	bl	80022da <HAL_ADC_GetValue>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b46      	ldr	r3, [pc, #280]	@ (8001528 <main+0x2e0>)
 8001410:	801a      	strh	r2, [r3, #0]
 	   sprintf(msg, "Light: %hu \r\n", val);
 8001412:	4b45      	ldr	r3, [pc, #276]	@ (8001528 <main+0x2e0>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4944      	ldr	r1, [pc, #272]	@ (800152c <main+0x2e4>)
 800141a:	4845      	ldr	r0, [pc, #276]	@ (8001530 <main+0x2e8>)
 800141c:	f003 ffc4 	bl	80053a8 <siprintf>
 	   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001420:	4843      	ldr	r0, [pc, #268]	@ (8001530 <main+0x2e8>)
 8001422:	f7fe fed5 	bl	80001d0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142e:	4940      	ldr	r1, [pc, #256]	@ (8001530 <main+0x2e8>)
 8001430:	4829      	ldr	r0, [pc, #164]	@ (80014d8 <main+0x290>)
 8001432:	f003 fbf7 	bl	8004c24 <HAL_UART_Transmit>
        //HAL_Delay(1000);

 	   if(main_dist >= 50 && val <= 200)
 8001436:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <main+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b31      	cmp	r3, #49	@ 0x31
 800143c:	d912      	bls.n	8001464 <main+0x21c>
 800143e:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <main+0x2e0>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	2bc8      	cmp	r3, #200	@ 0xc8
 8001444:	d80e      	bhi.n	8001464 <main+0x21c>
 	   {
 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2120      	movs	r1, #32
 800144a:	4824      	ldr	r0, [pc, #144]	@ (80014dc <main+0x294>)
 800144c:	f001 fbee 	bl	8002c2c <HAL_GPIO_WritePin>
 		  HAL_Delay(5000);
 8001450:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001454:	f000 fd7c 	bl	8001f50 <HAL_Delay>
 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2120      	movs	r1, #32
 800145c:	481f      	ldr	r0, [pc, #124]	@ (80014dc <main+0x294>)
 800145e:	f001 fbe5 	bl	8002c2c <HAL_GPIO_WritePin>
 8001462:	e025      	b.n	80014b0 <main+0x268>
 	   }

 	   else if(main_dist >=50  && val > 3950)
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <main+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b31      	cmp	r3, #49	@ 0x31
 800146a:	d914      	bls.n	8001496 <main+0x24e>
 800146c:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <main+0x2e0>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	f640 726e 	movw	r2, #3950	@ 0xf6e
 8001474:	4293      	cmp	r3, r2
 8001476:	d90e      	bls.n	8001496 <main+0x24e>
 	   {
 		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2120      	movs	r1, #32
 800147c:	4817      	ldr	r0, [pc, #92]	@ (80014dc <main+0x294>)
 800147e:	f001 fbd5 	bl	8002c2c <HAL_GPIO_WritePin>
 		   HAL_Delay(3000);
 8001482:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001486:	f000 fd63 	bl	8001f50 <HAL_Delay>
 		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2120      	movs	r1, #32
 800148e:	4813      	ldr	r0, [pc, #76]	@ (80014dc <main+0x294>)
 8001490:	f001 fbcc 	bl	8002c2c <HAL_GPIO_WritePin>
 8001494:	e00c      	b.n	80014b0 <main+0x268>
 	   }

 	   else if(main_dist < 25 || main_dist > 0)
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <main+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b18      	cmp	r3, #24
 800149c:	d903      	bls.n	80014a6 <main+0x25e>
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <main+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <main+0x268>
 	   {
 		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2120      	movs	r1, #32
 80014aa:	480c      	ldr	r0, [pc, #48]	@ (80014dc <main+0x294>)
 80014ac:	f001 fbbe 	bl	8002c2c <HAL_GPIO_WritePin>
 	   }
 	   HAL_Delay(1000);
 80014b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b4:	f000 fd4c 	bl	8001f50 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80014b8:	e6fc      	b.n	80012b4 <main+0x6c>
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	b020c49c 	.word	0xb020c49c
 80014c4:	3fa16872 	.word	0x3fa16872
 80014c8:	08005d00 	.word	0x08005d00
 80014cc:	20000150 	.word	0x20000150
 80014d0:	20000108 	.word	0x20000108
 80014d4:	200000c0 	.word	0x200000c0
 80014d8:	20000198 	.word	0x20000198
 80014dc:	40020000 	.word	0x40020000
 80014e0:	200001e0 	.word	0x200001e0
 80014e4:	200001e4 	.word	0x200001e4
 80014e8:	42680000 	.word	0x42680000
 80014ec:	200001e8 	.word	0x200001e8
 80014f0:	200001ec 	.word	0x200001ec
 80014f4:	200001f0 	.word	0x200001f0
 80014f8:	08005d34 	.word	0x08005d34
 80014fc:	200001f4 	.word	0x200001f4
 8001500:	08005d44 	.word	0x08005d44
 8001504:	20000214 	.word	0x20000214
 8001508:	08005d54 	.word	0x08005d54
 800150c:	20000234 	.word	0x20000234
 8001510:	08005d64 	.word	0x08005d64
 8001514:	20000254 	.word	0x20000254
 8001518:	08005d74 	.word	0x08005d74
 800151c:	20000274 	.word	0x20000274
 8001520:	08005d80 	.word	0x08005d80
 8001524:	20000078 	.word	0x20000078
 8001528:	20000294 	.word	0x20000294
 800152c:	08005d98 	.word	0x08005d98
 8001530:	20000298 	.word	0x20000298

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b094      	sub	sp, #80	@ 0x50
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2230      	movs	r2, #48	@ 0x30
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f003 ff50 	bl	80053e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <SystemClock_Config+0xcc>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <SystemClock_Config+0xcc>)
 8001562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001566:	6413      	str	r3, [r2, #64]	@ 0x40
 8001568:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <SystemClock_Config+0xcc>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <SystemClock_Config+0xd0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a21      	ldr	r2, [pc, #132]	@ (8001604 <SystemClock_Config+0xd0>)
 800157e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <SystemClock_Config+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001598:	2310      	movs	r3, #16
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a4:	2308      	movs	r3, #8
 80015a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80015a8:	23a0      	movs	r3, #160	@ 0xa0
 80015aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b0:	2307      	movs	r3, #7
 80015b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fb4f 	bl	8002c5c <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c4:	f000 fa36 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015cc:	2302      	movs	r3, #2
 80015ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	2105      	movs	r1, #5
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fdb0 	bl	800314c <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015f2:	f000 fa1f 	bl	8001a34 <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	@ 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800161a:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <MX_ADC1_Init+0x98>)
 800161c:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <MX_ADC1_Init+0x9c>)
 800161e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001626:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800162c:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001632:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001648:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <MX_ADC1_Init+0xa0>)
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_ADC1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001654:	2201      	movs	r2, #1
 8001656:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_ADC1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001662:	2201      	movs	r2, #1
 8001664:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001666:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001668:	f000 fc96 	bl	8001f98 <HAL_ADC_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 f9df 	bl	8001a34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800167e:	2301      	movs	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <MX_ADC1_Init+0x98>)
 8001688:	f000 fe34 	bl	80022f4 <HAL_ADC_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001692:	f000 f9cf 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000078 	.word	0x20000078
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	@ 0x38
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <MX_TIM3_Init+0xe8>)
 80016de:	4a2e      	ldr	r2, [pc, #184]	@ (8001798 <MX_TIM3_Init+0xec>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <MX_TIM3_Init+0xe8>)
 80016e4:	f240 321f 	movw	r2, #799	@ 0x31f
 80016e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <MX_TIM3_Init+0xe8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <MX_TIM3_Init+0xe8>)
 80016f2:	2263      	movs	r2, #99	@ 0x63
 80016f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <MX_TIM3_Init+0xe8>)
 80016f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fe:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <MX_TIM3_Init+0xe8>)
 8001700:	2280      	movs	r2, #128	@ 0x80
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001704:	4823      	ldr	r0, [pc, #140]	@ (8001794 <MX_TIM3_Init+0xe8>)
 8001706:	f001 ff45 	bl	8003594 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001710:	f000 f990 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800171e:	4619      	mov	r1, r3
 8001720:	481c      	ldr	r0, [pc, #112]	@ (8001794 <MX_TIM3_Init+0xe8>)
 8001722:	f002 fb9f 	bl	8003e64 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800172c:	f000 f982 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001730:	4818      	ldr	r0, [pc, #96]	@ (8001794 <MX_TIM3_Init+0xe8>)
 8001732:	f001 ffe5 	bl	8003700 <HAL_TIM_PWM_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800173c:	f000 f97a 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4619      	mov	r1, r3
 800174e:	4811      	ldr	r0, [pc, #68]	@ (8001794 <MX_TIM3_Init+0xe8>)
 8001750:	f003 f99e 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800175a:	f000 f96b 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	2360      	movs	r3, #96	@ 0x60
 8001760:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <MX_TIM3_Init+0xe8>)
 8001776:	f002 fab3 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001780:	f000 f958 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001784:	4803      	ldr	r0, [pc, #12]	@ (8001794 <MX_TIM3_Init+0xe8>)
 8001786:	f000 fa39 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 800178a:	bf00      	nop
 800178c:	3738      	adds	r7, #56	@ 0x38
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000c0 	.word	0x200000c0
 8001798:	40000400 	.word	0x40000400

0800179c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	@ 0x30
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017c8:	4b34      	ldr	r3, [pc, #208]	@ (800189c <MX_TIM8_Init+0x100>)
 80017ca:	4a35      	ldr	r2, [pc, #212]	@ (80018a0 <MX_TIM8_Init+0x104>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 80017ce:	4b33      	ldr	r3, [pc, #204]	@ (800189c <MX_TIM8_Init+0x100>)
 80017d0:	224f      	movs	r2, #79	@ 0x4f
 80017d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b31      	ldr	r3, [pc, #196]	@ (800189c <MX_TIM8_Init+0x100>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017da:	4b30      	ldr	r3, [pc, #192]	@ (800189c <MX_TIM8_Init+0x100>)
 80017dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b2e      	ldr	r3, [pc, #184]	@ (800189c <MX_TIM8_Init+0x100>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017e8:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <MX_TIM8_Init+0x100>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <MX_TIM8_Init+0x100>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017f4:	4829      	ldr	r0, [pc, #164]	@ (800189c <MX_TIM8_Init+0x100>)
 80017f6:	f001 fecd 	bl	8003594 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001800:	f000 f918 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001804:	4825      	ldr	r0, [pc, #148]	@ (800189c <MX_TIM8_Init+0x100>)
 8001806:	f002 f89b 	bl	8003940 <HAL_TIM_IC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001810:	f000 f910 	bl	8001a34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001814:	2304      	movs	r3, #4
 8001816:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001818:	2360      	movs	r3, #96	@ 0x60
 800181a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800181c:	230a      	movs	r3, #10
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	481c      	ldr	r0, [pc, #112]	@ (800189c <MX_TIM8_Init+0x100>)
 800182c:	f002 fbe1 	bl	8003ff2 <HAL_TIM_SlaveConfigSynchro>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001836:	f000 f8fd 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4814      	ldr	r0, [pc, #80]	@ (800189c <MX_TIM8_Init+0x100>)
 800184a:	f003 f921 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001854:	f000 f8ee 	bl	8001a34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001858:	230a      	movs	r3, #10
 800185a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800185c:	2301      	movs	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	480b      	ldr	r0, [pc, #44]	@ (800189c <MX_TIM8_Init+0x100>)
 8001870:	f002 f99a 	bl	8003ba8 <HAL_TIM_IC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 800187a:	f000 f8db 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2204      	movs	r2, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_TIM8_Init+0x100>)
 8001886:	f002 f98f 	bl	8003ba8 <HAL_TIM_IC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001890:	f000 f8d0 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3730      	adds	r7, #48	@ 0x30
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000108 	.word	0x20000108
 80018a0:	40010400 	.word	0x40010400

080018a4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018be:	4a1f      	ldr	r2, [pc, #124]	@ (800193c <MX_TIM11_Init+0x98>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018c4:	22c7      	movs	r2, #199	@ 0xc7
 80018c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018d0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80018d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80018e2:	4815      	ldr	r0, [pc, #84]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018e4:	f001 fe56 	bl	8003594 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80018ee:	f000 f8a1 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80018f2:	4811      	ldr	r0, [pc, #68]	@ (8001938 <MX_TIM11_Init+0x94>)
 80018f4:	f001 ff04 	bl	8003700 <HAL_TIM_PWM_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80018fe:	f000 f899 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001902:	2360      	movs	r3, #96	@ 0x60
 8001904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	4807      	ldr	r0, [pc, #28]	@ (8001938 <MX_TIM11_Init+0x94>)
 800191a:	f002 f9e1 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001924:	f000 f886 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001928:	4803      	ldr	r0, [pc, #12]	@ (8001938 <MX_TIM11_Init+0x94>)
 800192a:	f000 f967 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 800192e:	bf00      	nop
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000150 	.word	0x20000150
 800193c:	40014800 	.word	0x40014800

08001940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <MX_USART2_UART_Init+0x50>)
 8001948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 800194c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_USART2_UART_Init+0x4c>)
 8001978:	f003 f904 	bl	8004b84 <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001982:	f000 f857 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000198 	.word	0x20000198
 8001990:	40004400 	.word	0x40004400

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_GPIO_Init+0x98>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2120      	movs	r1, #32
 8001a02:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <MX_GPIO_Init+0x9c>)
 8001a04:	f001 f912 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4804      	ldr	r0, [pc, #16]	@ (8001a30 <MX_GPIO_Init+0x9c>)
 8001a20:	f000 ff6a 	bl	80028f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add their own implementation to report the HAL error return state */
  while(1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <Error_Handler+0x4>

08001a3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f000 ff08 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_ADC_MspInit+0x7c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d127      	bne.n	8001afe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_ADC_MspInit+0x80>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	4a15      	ldr	r2, [pc, #84]	@ (8001b0c <HAL_ADC_MspInit+0x80>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001abe:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <HAL_ADC_MspInit+0x80>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_ADC_MspInit+0x80>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <HAL_ADC_MspInit+0x80>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <HAL_ADC_MspInit+0x80>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aea:	2303      	movs	r3, #3
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <HAL_ADC_MspInit+0x84>)
 8001afa:	f000 fefd 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	@ 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40012000 	.word	0x40012000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	@ 0x30
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2d      	ldr	r2, [pc, #180]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001b52:	e044      	b.n	8001bde <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a25      	ldr	r2, [pc, #148]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xdc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d12c      	bne.n	8001bb8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a21      	ldr	r2, [pc, #132]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a1a      	ldr	r2, [pc, #104]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b96:	23c0      	movs	r3, #192	@ 0xc0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4810      	ldr	r0, [pc, #64]	@ (8001bf4 <HAL_TIM_Base_MspInit+0xe0>)
 8001bb2:	f000 fea1 	bl	80028f8 <HAL_GPIO_Init>
}
 8001bb6:	e012      	b.n	8001bde <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM11)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf8 <HAL_TIM_Base_MspInit+0xe4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10d      	bne.n	8001bde <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a08      	ldr	r2, [pc, #32]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_TIM_Base_MspInit+0xd8>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	bf00      	nop
 8001be0:	3730      	adds	r7, #48	@ 0x30
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40010400 	.word	0x40010400
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40014800 	.word	0x40014800

08001bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a24      	ldr	r2, [pc, #144]	@ (8001cac <HAL_TIM_MspPostInit+0xb0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d11e      	bne.n	8001c5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_TIM_MspPostInit+0xb4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a22      	ldr	r2, [pc, #136]	@ (8001cb0 <HAL_TIM_MspPostInit+0xb4>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_TIM_MspPostInit+0xb4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c3a:	2340      	movs	r3, #64	@ 0x40
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4817      	ldr	r0, [pc, #92]	@ (8001cb4 <HAL_TIM_MspPostInit+0xb8>)
 8001c56:	f000 fe4f 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001c5a:	e023      	b.n	8001ca4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM11)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a15      	ldr	r2, [pc, #84]	@ (8001cb8 <HAL_TIM_MspPostInit+0xbc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d11e      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_TIM_MspPostInit+0xb4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <HAL_TIM_MspPostInit+0xb4>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <HAL_TIM_MspPostInit+0xb4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001c94:	2303      	movs	r3, #3
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <HAL_TIM_MspPostInit+0xc0>)
 8001ca0:	f000 fe2a 	bl	80028f8 <HAL_GPIO_Init>
}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	@ 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40014800 	.word	0x40014800
 8001cbc:	40020400 	.word	0x40020400

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	@ 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <HAL_UART_MspInit+0x84>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d12b      	bne.n	8001d3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_UART_MspInit+0x88>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_UART_MspInit+0x88>)
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_UART_MspInit+0x88>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_UART_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a10      	ldr	r2, [pc, #64]	@ (8001d48 <HAL_UART_MspInit+0x88>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_UART_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <HAL_UART_MspInit+0x8c>)
 8001d36:	f000 fddf 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	@ 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40004400 	.word	0x40004400
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <NMI_Handler+0x4>

08001d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <MemManage_Handler+0x4>

08001d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da0:	f000 f8ba 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f003 fb0e 	bl	80053f8 <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20020000 	.word	0x20020000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	200002b8 	.word	0x200002b8
 8001e10:	20000408 	.word	0x20000408

08001e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e24:	f7ff fff6 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2a:	490d      	ldr	r1, [pc, #52]	@ (8001e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e40:	4c0a      	ldr	r4, [pc, #40]	@ (8001e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f003 fad9 	bl	8005404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff f9f9 	bl	8001248 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e64:	08005e04 	.word	0x08005e04
  ldr r2, =_sbss
 8001e68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e6c:	20000408 	.word	0x20000408

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	@ (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 fcf7 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f808 	bl	8001eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fdc8 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <HAL_InitTick+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <HAL_InitTick+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fd01 	bl	80028de <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ef4:	f000 fcd7 	bl	80028a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	@ (8001f14 <HAL_InitTick+0x5c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <HAL_IncTick+0x1c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_IncTick+0x20>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a03      	ldr	r2, [pc, #12]	@ (8001f38 <HAL_IncTick+0x20>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000008 	.word	0x20000008
 8001f38:	200002bc 	.word	0x200002bc

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b02      	ldr	r3, [pc, #8]	@ (8001f4c <HAL_GetTick+0x10>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	200002bc 	.word	0x200002bc

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff fff0 	bl	8001f3c <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffe0 	bl	8001f3c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000008 	.word	0x20000008

08001f98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e033      	b.n	8002016 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fd68 	bl	8001a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d118      	bne.n	8002008 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fde:	f023 0302 	bic.w	r3, r3, #2
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 faa4 	bl	8002538 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
 8002006:	e001      	b.n	800200c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_ADC_Start+0x1a>
 8002036:	2302      	movs	r3, #2
 8002038:	e0b2      	b.n	80021a0 <HAL_ADC_Start+0x180>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d018      	beq.n	8002082 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002060:	4b52      	ldr	r3, [pc, #328]	@ (80021ac <HAL_ADC_Start+0x18c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_ADC_Start+0x190>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0c9a      	lsrs	r2, r3, #18
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002074:	e002      	b.n	800207c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3b01      	subs	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f9      	bne.n	8002076 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d17a      	bne.n	8002186 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ce:	d106      	bne.n	80020de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	f023 0206 	bic.w	r2, r3, #6
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	645a      	str	r2, [r3, #68]	@ 0x44
 80020dc:	e002      	b.n	80020e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ec:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <HAL_ADC_Start+0x194>)
 80020ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80020f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2b00      	cmp	r3, #0
 8002104:	d12a      	bne.n	800215c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2b      	ldr	r2, [pc, #172]	@ (80021b8 <HAL_ADC_Start+0x198>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d015      	beq.n	800213c <HAL_ADC_Start+0x11c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a29      	ldr	r2, [pc, #164]	@ (80021bc <HAL_ADC_Start+0x19c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d105      	bne.n	8002126 <HAL_ADC_Start+0x106>
 800211a:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <HAL_ADC_Start+0x194>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a25      	ldr	r2, [pc, #148]	@ (80021c0 <HAL_ADC_Start+0x1a0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d136      	bne.n	800219e <HAL_ADC_Start+0x17e>
 8002130:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_ADC_Start+0x194>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d130      	bne.n	800219e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d129      	bne.n	800219e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e020      	b.n	800219e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a15      	ldr	r2, [pc, #84]	@ (80021b8 <HAL_ADC_Start+0x198>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d11b      	bne.n	800219e <HAL_ADC_Start+0x17e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d114      	bne.n	800219e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e00b      	b.n	800219e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f043 0210 	orr.w	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	40012300 	.word	0x40012300
 80021b8:	40012000 	.word	0x40012000
 80021bc:	40012100 	.word	0x40012100
 80021c0:	40012200 	.word	0x40012200

080021c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e0:	d113      	bne.n	800220a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f0:	d10b      	bne.n	800220a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f043 0220 	orr.w	r2, r3, #32
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e063      	b.n	80022d2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800220a:	f7ff fe97 	bl	8001f3c <HAL_GetTick>
 800220e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002210:	e021      	b.n	8002256 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002218:	d01d      	beq.n	8002256 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_ADC_PollForConversion+0x6c>
 8002220:	f7ff fe8c 	bl	8001f3c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d212      	bcs.n	8002256 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d00b      	beq.n	8002256 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f043 0204 	orr.w	r2, r3, #4
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e03d      	b.n	80022d2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d1d6      	bne.n	8002212 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0212 	mvn.w	r2, #18
 800226c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d123      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11f      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002296:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d111      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1c>
 800230c:	2302      	movs	r3, #2
 800230e:	e105      	b.n	800251c <HAL_ADC_ConfigChannel+0x228>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d925      	bls.n	800236c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	2207      	movs	r2, #7
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43da      	mvns	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	400a      	ands	r2, r1
 8002344:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	4603      	mov	r3, r0
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4403      	add	r3, r0
 800235e:	3b1e      	subs	r3, #30
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	e022      	b.n	80023b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	2207      	movs	r2, #7
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	400a      	ands	r2, r1
 800238e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4403      	add	r3, r0
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d824      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b05      	subs	r3, #5
 80023cc:	221f      	movs	r2, #31
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b05      	subs	r3, #5
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
 8002402:	e04c      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d824      	bhi.n	8002456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b23      	subs	r3, #35	@ 0x23
 800241e:	221f      	movs	r2, #31
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b23      	subs	r3, #35	@ 0x23
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
 8002454:	e023      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b41      	subs	r3, #65	@ 0x41
 8002468:	221f      	movs	r2, #31
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	400a      	ands	r2, r1
 8002476:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b41      	subs	r3, #65	@ 0x41
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_ADC_ConfigChannel+0x234>)
 80024a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <HAL_ADC_ConfigChannel+0x238>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d109      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1cc>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b12      	cmp	r3, #18
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a19      	ldr	r2, [pc, #100]	@ (800252c <HAL_ADC_ConfigChannel+0x238>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d123      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x21e>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d003      	beq.n	80024da <HAL_ADC_ConfigChannel+0x1e6>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b11      	cmp	r3, #17
 80024d8:	d11b      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d111      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_ADC_ConfigChannel+0x23c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <HAL_ADC_ConfigChannel+0x240>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	0c9a      	lsrs	r2, r3, #18
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002504:	e002      	b.n	800250c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3b01      	subs	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f9      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40012300 	.word	0x40012300
 800252c:	40012000 	.word	0x40012000
 8002530:	20000000 	.word	0x20000000
 8002534:	431bde83 	.word	0x431bde83

08002538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002540:	4b79      	ldr	r3, [pc, #484]	@ (8002728 <ADC_Init+0x1f0>)
 8002542:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800256c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	021a      	lsls	r2, r3, #8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ca:	4a58      	ldr	r2, [pc, #352]	@ (800272c <ADC_Init+0x1f4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6899      	ldr	r1, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	e00f      	b.n	8002636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002634:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0202 	bic.w	r2, r2, #2
 8002644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6899      	ldr	r1, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7e1b      	ldrb	r3, [r3, #24]
 8002650:	005a      	lsls	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01b      	beq.n	800269c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002672:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	3b01      	subs	r3, #1
 8002690:	035a      	lsls	r2, r3, #13
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	e007      	b.n	80026ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	051a      	lsls	r2, r3, #20
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ee:	025a      	lsls	r2, r3, #9
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	029a      	lsls	r2, r3, #10
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40012300 	.word	0x40012300
 800272c:	0f000001 	.word	0x0f000001

08002730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800275c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002762:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60d3      	str	r3, [r2, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	@ (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002870:	f7ff ff90 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff49 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff5e 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff90 	bl	80027e8 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5f 	bl	8002794 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ffb0 	bl	800284c <SysTick_Config>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	@ 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e16b      	b.n	8002bec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 815a 	bne.w	8002be6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80b4 	beq.w	8002be6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b5f      	ldr	r3, [pc, #380]	@ (8002c00 <HAL_GPIO_Init+0x308>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	4a5e      	ldr	r2, [pc, #376]	@ (8002c00 <HAL_GPIO_Init+0x308>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002c00 <HAL_GPIO_Init+0x308>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002c04 <HAL_GPIO_Init+0x30c>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a51      	ldr	r2, [pc, #324]	@ (8002c08 <HAL_GPIO_Init+0x310>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02b      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a50      	ldr	r2, [pc, #320]	@ (8002c0c <HAL_GPIO_Init+0x314>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d025      	beq.n	8002b1a <HAL_GPIO_Init+0x222>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c10 <HAL_GPIO_Init+0x318>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01f      	beq.n	8002b16 <HAL_GPIO_Init+0x21e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8002c14 <HAL_GPIO_Init+0x31c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d019      	beq.n	8002b12 <HAL_GPIO_Init+0x21a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8002c18 <HAL_GPIO_Init+0x320>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0x216>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8002c1c <HAL_GPIO_Init+0x324>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x212>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c20 <HAL_GPIO_Init+0x328>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x20e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4a      	ldr	r2, [pc, #296]	@ (8002c24 <HAL_GPIO_Init+0x32c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x20a>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e00e      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b02:	2308      	movs	r3, #8
 8002b04:	e00c      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b06:	2306      	movs	r3, #6
 8002b08:	e00a      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	e008      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b0e:	2304      	movs	r3, #4
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b12:	2303      	movs	r3, #3
 8002b14:	e004      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_GPIO_Init+0x228>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f002 0203 	and.w	r2, r2, #3
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	4093      	lsls	r3, r2
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b30:	4934      	ldr	r1, [pc, #208]	@ (8002c04 <HAL_GPIO_Init+0x30c>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b62:	4a31      	ldr	r2, [pc, #196]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b68:	4b2f      	ldr	r3, [pc, #188]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b8c:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b92:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be0:	4a11      	ldr	r2, [pc, #68]	@ (8002c28 <HAL_GPIO_Init+0x330>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3301      	adds	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b0f      	cmp	r3, #15
 8002bf0:	f67f ae90 	bls.w	8002914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3724      	adds	r7, #36	@ 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40021400 	.word	0x40021400
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021c00 	.word	0x40021c00
 8002c28:	40013c00 	.word	0x40013c00

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c48:	e003      	b.n	8002c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	041a      	lsls	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	619a      	str	r2, [r3, #24]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e267      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d075      	beq.n	8002d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	4b88      	ldr	r3, [pc, #544]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d00c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c86:	4b85      	ldr	r3, [pc, #532]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d112      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b82      	ldr	r3, [pc, #520]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05b      	beq.n	8002d64 <HAL_RCC_OscConfig+0x108>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d157      	bne.n	8002d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e242      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x74>
 8002cc2:	4b76      	ldr	r3, [pc, #472]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a75      	ldr	r2, [pc, #468]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e01d      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x98>
 8002cda:	4b70      	ldr	r3, [pc, #448]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6f      	ldr	r2, [pc, #444]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6c      	ldr	r2, [pc, #432]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cf4:	4b69      	ldr	r3, [pc, #420]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a68      	ldr	r2, [pc, #416]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b66      	ldr	r3, [pc, #408]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a65      	ldr	r2, [pc, #404]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7ff f912 	bl	8001f3c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7ff f90e 	bl	8001f3c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	@ 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e207      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0xc0>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f8fe 	bl	8001f3c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d44:	f7ff f8fa 	bl	8001f3c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1f3      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	4b51      	ldr	r3, [pc, #324]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0xe8>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7e:	4b47      	ldr	r3, [pc, #284]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d11c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b44      	ldr	r3, [pc, #272]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	4b41      	ldr	r3, [pc, #260]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1c7      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4937      	ldr	r1, [pc, #220]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	e03a      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	4b34      	ldr	r3, [pc, #208]	@ (8002ea0 <HAL_RCC_OscConfig+0x244>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7ff f8b3 	bl	8001f3c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7ff f8af 	bl	8001f3c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e1a8      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4925      	ldr	r1, [pc, #148]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ea0 <HAL_RCC_OscConfig+0x244>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7ff f892 	bl	8001f3c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7ff f88e 	bl	8001f3c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e187      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d036      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_RCC_OscConfig+0x248>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7ff f872 	bl	8001f3c <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7ff f86e 	bl	8001f3c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e167      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x200>
 8002e7a:	e01b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCC_OscConfig+0x248>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7ff f85b 	bl	8001f3c <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	e00e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7ff f857 	bl	8001f3c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d907      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e150      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	42470000 	.word	0x42470000
 8002ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b88      	ldr	r3, [pc, #544]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ea      	bne.n	8002e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8097 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec6:	4b81      	ldr	r3, [pc, #516]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b7d      	ldr	r3, [pc, #500]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	4a7c      	ldr	r2, [pc, #496]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee2:	4b7a      	ldr	r3, [pc, #488]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b77      	ldr	r3, [pc, #476]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b74      	ldr	r3, [pc, #464]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a73      	ldr	r2, [pc, #460]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7ff f817 	bl	8001f3c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7ff f813 	bl	8001f3c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e10c      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2ea>
 8002f38:	4b64      	ldr	r3, [pc, #400]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	4a63      	ldr	r2, [pc, #396]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f44:	e01c      	b.n	8002f80 <HAL_RCC_OscConfig+0x324>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x30c>
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f52:	4a5e      	ldr	r2, [pc, #376]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0x324>
 8002f68:	4b58      	ldr	r3, [pc, #352]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a57      	ldr	r2, [pc, #348]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f74:	4b55      	ldr	r3, [pc, #340]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	4a54      	ldr	r2, [pc, #336]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 0304 	bic.w	r3, r3, #4
 8002f7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe ffd8 	bl	8001f3c <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f90:	f7fe ffd4 	bl	8001f3c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0cb      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	4b49      	ldr	r3, [pc, #292]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0ee      	beq.n	8002f90 <HAL_RCC_OscConfig+0x334>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe ffc2 	bl	8001f3c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe ffbe 	bl	8001f3c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0b5      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ee      	bne.n	8002fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe4:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	4a38      	ldr	r2, [pc, #224]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a1 	beq.w	800313c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffa:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b08      	cmp	r3, #8
 8003004:	d05c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d141      	bne.n	8003092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b31      	ldr	r3, [pc, #196]	@ (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe ff92 	bl	8001f3c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe ff8e 	bl	8001f3c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e087      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	491b      	ldr	r1, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fe ff67 	bl	8001f3c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003072:	f7fe ff63 	bl	8001f3c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e05c      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x416>
 8003090:	e054      	b.n	800313c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe ff50 	bl	8001f3c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe ff4c 	bl	8001f3c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e045      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x444>
 80030be:	e03d      	b.n	800313c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e038      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000
 80030d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x4ec>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d028      	beq.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d121      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d11a      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003108:	4013      	ands	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800310e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003110:	4293      	cmp	r3, r2
 8003112:	d111      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0cc      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b68      	ldr	r3, [pc, #416]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d90c      	bls.n	8003188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b65      	ldr	r3, [pc, #404]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b63      	ldr	r3, [pc, #396]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0b8      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a0:	4b59      	ldr	r3, [pc, #356]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b8:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a52      	ldr	r2, [pc, #328]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b50      	ldr	r3, [pc, #320]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	494d      	ldr	r1, [pc, #308]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d044      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d119      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e07f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d003      	beq.n	800320a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	2b03      	cmp	r3, #3
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	4b3f      	ldr	r3, [pc, #252]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e06f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b3b      	ldr	r3, [pc, #236]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e067      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322a:	4b37      	ldr	r3, [pc, #220]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 0203 	bic.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4934      	ldr	r1, [pc, #208]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe fe7e 	bl	8001f3c <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	e00a      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003244:	f7fe fe7a 	bl	8001f3c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e04f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 020c 	and.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1eb      	bne.n	8003244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d20c      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e032      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4916      	ldr	r1, [pc, #88]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	490e      	ldr	r1, [pc, #56]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d2:	f000 f821 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490a      	ldr	r1, [pc, #40]	@ (800330c <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fde0 	bl	8001eb8 <HAL_InitTick>

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023c00 	.word	0x40023c00
 8003308:	40023800 	.word	0x40023800
 800330c:	08005da8 	.word	0x08005da8
 8003310:	20000000 	.word	0x20000000
 8003314:	20000004 	.word	0x20000004

08003318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b094      	sub	sp, #80	@ 0x50
 800331e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	647b      	str	r3, [r7, #68]	@ 0x44
 8003324:	2300      	movs	r3, #0
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003328:	2300      	movs	r3, #0
 800332a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003330:	4b7c      	ldr	r3, [pc, #496]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d00d      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x40>
 800333c:	2b08      	cmp	r3, #8
 800333e:	f200 80e7 	bhi.w	8003510 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x34>
 8003346:	2b04      	cmp	r3, #4
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x3a>
 800334a:	e0e1      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800334c:	4b76      	ldr	r3, [pc, #472]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x210>)
 800334e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003350:	e0e1      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003352:	4b76      	ldr	r3, [pc, #472]	@ (800352c <HAL_RCC_GetSysClockFreq+0x214>)
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003356:	e0de      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003358:	4b72      	ldr	r3, [pc, #456]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x20c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003362:	4b70      	ldr	r3, [pc, #448]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d065      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336e:	4b6d      	ldr	r3, [pc, #436]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	2200      	movs	r2, #0
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003378:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	633b      	str	r3, [r7, #48]	@ 0x30
 8003382:	2300      	movs	r3, #0
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34
 8003386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339c:	0150      	lsls	r0, r2, #5
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4621      	mov	r1, r4
 80033a4:	1a51      	subs	r1, r2, r1
 80033a6:	6139      	str	r1, [r7, #16]
 80033a8:	4629      	mov	r1, r5
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033bc:	4659      	mov	r1, fp
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c6:	4651      	mov	r1, sl
 80033c8:	018a      	lsls	r2, r1, #6
 80033ca:	46d4      	mov	ip, sl
 80033cc:	ebb2 080c 	subs.w	r8, r2, ip
 80033d0:	4659      	mov	r1, fp
 80033d2:	eb63 0901 	sbc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	462b      	mov	r3, r5
 80033f8:	eb49 0303 	adc.w	r3, r9, r3
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800340a:	4629      	mov	r1, r5
 800340c:	024b      	lsls	r3, r1, #9
 800340e:	4620      	mov	r0, r4
 8003410:	4629      	mov	r1, r5
 8003412:	4604      	mov	r4, r0
 8003414:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003418:	4601      	mov	r1, r0
 800341a:	024a      	lsls	r2, r1, #9
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003422:	2200      	movs	r2, #0
 8003424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800342c:	f7fd fd94 	bl	8000f58 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003438:	e05c      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343a:	4b3a      	ldr	r3, [pc, #232]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x20c>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	2200      	movs	r2, #0
 8003442:	4618      	mov	r0, r3
 8003444:	4611      	mov	r1, r2
 8003446:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003450:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003454:	4642      	mov	r2, r8
 8003456:	464b      	mov	r3, r9
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	0159      	lsls	r1, r3, #5
 8003462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003466:	0150      	lsls	r0, r2, #5
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	46c4      	mov	ip, r8
 800346e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003472:	4640      	mov	r0, r8
 8003474:	4649      	mov	r1, r9
 8003476:	468c      	mov	ip, r1
 8003478:	eb63 0b0c 	sbc.w	fp, r3, ip
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800348c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003490:	ebb2 040a 	subs.w	r4, r2, sl
 8003494:	eb63 050b 	sbc.w	r5, r3, fp
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	00eb      	lsls	r3, r5, #3
 80034a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a6:	00e2      	lsls	r2, r4, #3
 80034a8:	4614      	mov	r4, r2
 80034aa:	461d      	mov	r5, r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	18e3      	adds	r3, r4, r3
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	460b      	mov	r3, r1
 80034b4:	eb45 0303 	adc.w	r3, r5, r3
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034c6:	4629      	mov	r1, r5
 80034c8:	028b      	lsls	r3, r1, #10
 80034ca:	4620      	mov	r0, r4
 80034cc:	4629      	mov	r1, r5
 80034ce:	4604      	mov	r4, r0
 80034d0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80034d4:	4601      	mov	r1, r0
 80034d6:	028a      	lsls	r2, r1, #10
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	61fa      	str	r2, [r7, #28]
 80034e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e8:	f7fd fd36 	bl	8000f58 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x20c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003504:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x210>)
 8003512:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003518:	4618      	mov	r0, r3
 800351a:	3750      	adds	r7, #80	@ 0x50
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b02      	ldr	r3, [pc, #8]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x10>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000000 	.word	0x20000000

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003548:	f7ff fff2 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0a9b      	lsrs	r3, r3, #10
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	08005db8 	.word	0x08005db8

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003570:	f7ff ffde 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0b5b      	lsrs	r3, r3, #13
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	@ (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	08005db8 	.word	0x08005db8

08003594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e041      	b.n	800362a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fe faaa 	bl	8001b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 fd94 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e046      	b.n	80036da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a22      	ldr	r2, [pc, #136]	@ (80036e4 <HAL_TIM_Base_Start+0xb0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d022      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d01d      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <HAL_TIM_Base_Start+0xb4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d018      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_TIM_Base_Start+0xb8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_TIM_Base_Start+0xbc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <HAL_TIM_Base_Start+0xc0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_TIM_Base_Start+0xc4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a17      	ldr	r2, [pc, #92]	@ (80036fc <HAL_TIM_Base_Start+0xc8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d111      	bne.n	80036c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d010      	beq.n	80036d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c6:	e007      	b.n	80036d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40001800 	.word	0x40001800

08003700 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f839 	bl	800379e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 fcde 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_TIM_PWM_Start+0x24>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e022      	b.n	800381a <HAL_TIM_PWM_Start+0x6a>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d109      	bne.n	80037ee <HAL_TIM_PWM_Start+0x3e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e015      	b.n	800381a <HAL_TIM_PWM_Start+0x6a>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d109      	bne.n	8003808 <HAL_TIM_PWM_Start+0x58>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e008      	b.n	800381a <HAL_TIM_PWM_Start+0x6a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07c      	b.n	800391c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <HAL_TIM_PWM_Start+0x82>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003830:	e013      	b.n	800385a <HAL_TIM_PWM_Start+0xaa>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_Start+0x92>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003840:	e00b      	b.n	800385a <HAL_TIM_PWM_Start+0xaa>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Start+0xa2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003850:	e003      	b.n	800385a <HAL_TIM_PWM_Start+0xaa>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f8ef 	bl	8004a46 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2d      	ldr	r2, [pc, #180]	@ (8003924 <HAL_TIM_PWM_Start+0x174>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_TIM_PWM_Start+0xcc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2c      	ldr	r2, [pc, #176]	@ (8003928 <HAL_TIM_PWM_Start+0x178>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_TIM_PWM_Start+0xd0>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_TIM_PWM_Start+0xd2>
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a22      	ldr	r2, [pc, #136]	@ (8003924 <HAL_TIM_PWM_Start+0x174>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d022      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a8:	d01d      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <HAL_TIM_PWM_Start+0x17c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003930 <HAL_TIM_PWM_Start+0x180>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003934 <HAL_TIM_PWM_Start+0x184>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a16      	ldr	r2, [pc, #88]	@ (8003928 <HAL_TIM_PWM_Start+0x178>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <HAL_TIM_PWM_Start+0x188>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x136>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a16      	ldr	r2, [pc, #88]	@ (800393c <HAL_TIM_PWM_Start+0x18c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d111      	bne.n	800390a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b06      	cmp	r3, #6
 80038f6:	d010      	beq.n	800391a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003908:	e007      	b.n	800391a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40010000 	.word	0x40010000
 8003928:	40010400 	.word	0x40010400
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40014000 	.word	0x40014000
 800393c:	40001800 	.word	0x40001800

08003940 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e041      	b.n	80039d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f839 	bl	80039de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fbbe 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_IC_Start+0x1a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e013      	b.n	8003a32 <HAL_TIM_IC_Start+0x42>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_IC_Start+0x2a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e00b      	b.n	8003a32 <HAL_TIM_IC_Start+0x42>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_IC_Start+0x3a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	e003      	b.n	8003a32 <HAL_TIM_IC_Start+0x42>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_TIM_IC_Start+0x54>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e013      	b.n	8003a6c <HAL_TIM_IC_Start+0x7c>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d104      	bne.n	8003a54 <HAL_TIM_IC_Start+0x64>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e00b      	b.n	8003a6c <HAL_TIM_IC_Start+0x7c>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d104      	bne.n	8003a64 <HAL_TIM_IC_Start+0x74>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e003      	b.n	8003a6c <HAL_TIM_IC_Start+0x7c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a74:	7bbb      	ldrb	r3, [r7, #14]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e081      	b.n	8003b82 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_IC_Start+0x9e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a8c:	e013      	b.n	8003ab6 <HAL_TIM_IC_Start+0xc6>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_IC_Start+0xae>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a9c:	e00b      	b.n	8003ab6 <HAL_TIM_IC_Start+0xc6>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_IC_Start+0xbe>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_IC_Start+0xc6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_IC_Start+0xd6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ac4:	e013      	b.n	8003aee <HAL_TIM_IC_Start+0xfe>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_IC_Start+0xe6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ad4:	e00b      	b.n	8003aee <HAL_TIM_IC_Start+0xfe>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_IC_Start+0xf6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ae4:	e003      	b.n	8003aee <HAL_TIM_IC_Start+0xfe>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2201      	movs	r2, #1
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 ffa5 	bl	8004a46 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a22      	ldr	r2, [pc, #136]	@ (8003b8c <HAL_TIM_IC_Start+0x19c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_TIM_IC_Start+0x15c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0e:	d01d      	beq.n	8003b4c <HAL_TIM_IC_Start+0x15c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	@ (8003b90 <HAL_TIM_IC_Start+0x1a0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_TIM_IC_Start+0x15c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <HAL_TIM_IC_Start+0x1a4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_TIM_IC_Start+0x15c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	@ (8003b98 <HAL_TIM_IC_Start+0x1a8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_TIM_IC_Start+0x15c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	@ (8003b9c <HAL_TIM_IC_Start+0x1ac>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_TIM_IC_Start+0x15c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ba0 <HAL_TIM_IC_Start+0x1b0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIM_IC_Start+0x15c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	@ (8003ba4 <HAL_TIM_IC_Start+0x1b4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d111      	bne.n	8003b70 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d010      	beq.n	8003b80 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6e:	e007      	b.n	8003b80 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40010400 	.word	0x40010400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40001800 	.word	0x40001800

08003ba8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e088      	b.n	8003cd8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d11b      	bne.n	8003c0c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003be4:	f000 fd74 	bl	80046d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 020c 	bic.w	r2, r2, #12
 8003bf6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6999      	ldr	r1, [r3, #24]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	619a      	str	r2, [r3, #24]
 8003c0a:	e060      	b.n	8003cce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d11c      	bne.n	8003c4c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c22:	f000 fdf5 	bl	8004810 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6999      	ldr	r1, [r3, #24]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	021a      	lsls	r2, r3, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	619a      	str	r2, [r3, #24]
 8003c4a:	e040      	b.n	8003cce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11b      	bne.n	8003c8a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c62:	f000 fe40 	bl	80048e6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 020c 	bic.w	r2, r2, #12
 8003c74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69d9      	ldr	r1, [r3, #28]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	61da      	str	r2, [r3, #28]
 8003c88:	e021      	b.n	8003cce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	d11c      	bne.n	8003cca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ca0:	f000 fe5c 	bl	800495c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cb2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69d9      	ldr	r1, [r3, #28]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	61da      	str	r2, [r3, #28]
 8003cc8:	e001      	b.n	8003cce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e0ae      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	f200 809f 	bhi.w	8003e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08003e4d 	.word	0x08003e4d
 8003d1c:	08003e4d 	.word	0x08003e4d
 8003d20:	08003e4d 	.word	0x08003e4d
 8003d24:	08003d89 	.word	0x08003d89
 8003d28:	08003e4d 	.word	0x08003e4d
 8003d2c:	08003e4d 	.word	0x08003e4d
 8003d30:	08003e4d 	.word	0x08003e4d
 8003d34:	08003dcb 	.word	0x08003dcb
 8003d38:	08003e4d 	.word	0x08003e4d
 8003d3c:	08003e4d 	.word	0x08003e4d
 8003d40:	08003e4d 	.word	0x08003e4d
 8003d44:	08003e0b 	.word	0x08003e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fa80 	bl	8004254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0204 	bic.w	r2, r2, #4
 8003d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6999      	ldr	r1, [r3, #24]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	619a      	str	r2, [r3, #24]
      break;
 8003d86:	e064      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fad0 	bl	8004334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6999      	ldr	r1, [r3, #24]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	021a      	lsls	r2, r3, #8
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	619a      	str	r2, [r3, #24]
      break;
 8003dc8:	e043      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fb23 	bl	800441c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0208 	orr.w	r2, r2, #8
 8003de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0204 	bic.w	r2, r2, #4
 8003df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69d9      	ldr	r1, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	61da      	str	r2, [r3, #28]
      break;
 8003e08:	e023      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fb77 	bl	8004504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69d9      	ldr	r1, [r3, #28]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	61da      	str	r2, [r3, #28]
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0b4      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x186>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb8:	d03e      	beq.n	8003f38 <HAL_TIM_ConfigClockSource+0xd4>
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ebe:	f200 8087 	bhi.w	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec6:	f000 8086 	beq.w	8003fd6 <HAL_TIM_ConfigClockSource+0x172>
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ece:	d87f      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b70      	cmp	r3, #112	@ 0x70
 8003ed2:	d01a      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xa6>
 8003ed4:	2b70      	cmp	r3, #112	@ 0x70
 8003ed6:	d87b      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b60      	cmp	r3, #96	@ 0x60
 8003eda:	d050      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x11a>
 8003edc:	2b60      	cmp	r3, #96	@ 0x60
 8003ede:	d877      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b50      	cmp	r3, #80	@ 0x50
 8003ee2:	d03c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ee4:	2b50      	cmp	r3, #80	@ 0x50
 8003ee6:	d873      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d058      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x13a>
 8003eec:	2b40      	cmp	r3, #64	@ 0x40
 8003eee:	d86f      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b30      	cmp	r3, #48	@ 0x30
 8003ef2:	d064      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003ef4:	2b30      	cmp	r3, #48	@ 0x30
 8003ef6:	d86b      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d060      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d867      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d05c      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003f04:	2b10      	cmp	r3, #16
 8003f06:	d05a      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	e062      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f1a:	f000 fd75 	bl	8004a08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	609a      	str	r2, [r3, #8]
      break;
 8003f36:	e04f      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f48:	f000 fd5e 	bl	8004a08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f5a:	609a      	str	r2, [r3, #8]
      break;
 8003f5c:	e03c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fc22 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2150      	movs	r1, #80	@ 0x50
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fd2c 	bl	80049d4 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e02c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 fc7c 	bl	8004888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2160      	movs	r1, #96	@ 0x60
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fd1c 	bl	80049d4 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e01c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 fc02 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2140      	movs	r1, #64	@ 0x40
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fd0c 	bl	80049d4 <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e00c      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f000 fd03 	bl	80049d4 <TIM_ITRx_SetConfig>
      break;
 8003fce:	e003      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd4:	e000      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004006:	2302      	movs	r3, #2
 8004008:	e031      	b.n	800406e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fac5 	bl	80045ac <TIM_SlaveTimer_SetConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e018      	b.n	800406e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800404a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800405a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d831      	bhi.n	80040f0 <HAL_TIM_ReadCapturedValue+0x78>
 800408c:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <HAL_TIM_ReadCapturedValue+0x1c>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040c9 	.word	0x080040c9
 8004098:	080040f1 	.word	0x080040f1
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	080040f1 	.word	0x080040f1
 80040a4:	080040d3 	.word	0x080040d3
 80040a8:	080040f1 	.word	0x080040f1
 80040ac:	080040f1 	.word	0x080040f1
 80040b0:	080040f1 	.word	0x080040f1
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040f1 	.word	0x080040f1
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	080040f1 	.word	0x080040f1
 80040c4:	080040e7 	.word	0x080040e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ce:	60fb      	str	r3, [r7, #12]

      break;
 80040d0:	e00f      	b.n	80040f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	60fb      	str	r3, [r7, #12]

      break;
 80040da:	e00a      	b.n	80040f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	60fb      	str	r3, [r7, #12]

      break;
 80040e4:	e005      	b.n	80040f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	60fb      	str	r3, [r7, #12]

      break;
 80040ee:	e000      	b.n	80040f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80040f0:	bf00      	nop
  }

  return tmpreg;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop

08004100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a45      	ldr	r2, [pc, #276]	@ (8004228 <TIM_Base_SetConfig+0x128>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411e:	d00f      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a42      	ldr	r2, [pc, #264]	@ (800422c <TIM_Base_SetConfig+0x12c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a41      	ldr	r2, [pc, #260]	@ (8004230 <TIM_Base_SetConfig+0x130>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a40      	ldr	r2, [pc, #256]	@ (8004234 <TIM_Base_SetConfig+0x134>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3f      	ldr	r2, [pc, #252]	@ (8004238 <TIM_Base_SetConfig+0x138>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a34      	ldr	r2, [pc, #208]	@ (8004228 <TIM_Base_SetConfig+0x128>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004160:	d027      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a31      	ldr	r2, [pc, #196]	@ (800422c <TIM_Base_SetConfig+0x12c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d023      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a30      	ldr	r2, [pc, #192]	@ (8004230 <TIM_Base_SetConfig+0x130>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01f      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2f      	ldr	r2, [pc, #188]	@ (8004234 <TIM_Base_SetConfig+0x134>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <TIM_Base_SetConfig+0x138>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d017      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2d      	ldr	r2, [pc, #180]	@ (800423c <TIM_Base_SetConfig+0x13c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a2c      	ldr	r2, [pc, #176]	@ (8004240 <TIM_Base_SetConfig+0x140>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00f      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <TIM_Base_SetConfig+0x144>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00b      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <TIM_Base_SetConfig+0x148>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a29      	ldr	r2, [pc, #164]	@ (800424c <TIM_Base_SetConfig+0x14c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a28      	ldr	r2, [pc, #160]	@ (8004250 <TIM_Base_SetConfig+0x150>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d108      	bne.n	80041c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <TIM_Base_SetConfig+0x128>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0xf8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a11      	ldr	r2, [pc, #68]	@ (8004238 <TIM_Base_SetConfig+0x138>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d103      	bne.n	8004200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	611a      	str	r2, [r3, #16]
  }
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40010400 	.word	0x40010400
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800
 8004248:	40001800 	.word	0x40001800
 800424c:	40001c00 	.word	0x40001c00
 8004250:	40002000 	.word	0x40002000

08004254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 0201 	bic.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 0302 	bic.w	r3, r3, #2
 800429c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a20      	ldr	r2, [pc, #128]	@ (800432c <TIM_OC1_SetConfig+0xd8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_OC1_SetConfig+0x64>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004330 <TIM_OC1_SetConfig+0xdc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10c      	bne.n	80042d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0308 	bic.w	r3, r3, #8
 80042be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a15      	ldr	r2, [pc, #84]	@ (800432c <TIM_OC1_SetConfig+0xd8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC1_SetConfig+0x8e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <TIM_OC1_SetConfig+0xdc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d111      	bne.n	8004306 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40010400 	.word	0x40010400

08004334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f023 0210 	bic.w	r2, r3, #16
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0320 	bic.w	r3, r3, #32
 800437e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a21      	ldr	r2, [pc, #132]	@ (8004414 <TIM_OC2_SetConfig+0xe0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC2_SetConfig+0x68>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a20      	ldr	r2, [pc, #128]	@ (8004418 <TIM_OC2_SetConfig+0xe4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d10d      	bne.n	80043b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <TIM_OC2_SetConfig+0xe0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_OC2_SetConfig+0x94>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a15      	ldr	r2, [pc, #84]	@ (8004418 <TIM_OC2_SetConfig+0xe4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d113      	bne.n	80043f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40010000 	.word	0x40010000
 8004418:	40010400 	.word	0x40010400

0800441c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a21      	ldr	r2, [pc, #132]	@ (80044fc <TIM_OC3_SetConfig+0xe0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d003      	beq.n	8004482 <TIM_OC3_SetConfig+0x66>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a20      	ldr	r2, [pc, #128]	@ (8004500 <TIM_OC3_SetConfig+0xe4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10d      	bne.n	800449e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800449c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <TIM_OC3_SetConfig+0xe0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_OC3_SetConfig+0x92>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <TIM_OC3_SetConfig+0xe4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d113      	bne.n	80044d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400

08004504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800454e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a11      	ldr	r2, [pc, #68]	@ (80045a4 <TIM_OC4_SetConfig+0xa0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_OC4_SetConfig+0x68>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a10      	ldr	r2, [pc, #64]	@ (80045a8 <TIM_OC4_SetConfig+0xa4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d109      	bne.n	8004580 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40010400 	.word	0x40010400

080045ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b70      	cmp	r3, #112	@ 0x70
 80045f4:	d01a      	beq.n	800462c <TIM_SlaveTimer_SetConfig+0x80>
 80045f6:	2b70      	cmp	r3, #112	@ 0x70
 80045f8:	d860      	bhi.n	80046bc <TIM_SlaveTimer_SetConfig+0x110>
 80045fa:	2b60      	cmp	r3, #96	@ 0x60
 80045fc:	d054      	beq.n	80046a8 <TIM_SlaveTimer_SetConfig+0xfc>
 80045fe:	2b60      	cmp	r3, #96	@ 0x60
 8004600:	d85c      	bhi.n	80046bc <TIM_SlaveTimer_SetConfig+0x110>
 8004602:	2b50      	cmp	r3, #80	@ 0x50
 8004604:	d046      	beq.n	8004694 <TIM_SlaveTimer_SetConfig+0xe8>
 8004606:	2b50      	cmp	r3, #80	@ 0x50
 8004608:	d858      	bhi.n	80046bc <TIM_SlaveTimer_SetConfig+0x110>
 800460a:	2b40      	cmp	r3, #64	@ 0x40
 800460c:	d019      	beq.n	8004642 <TIM_SlaveTimer_SetConfig+0x96>
 800460e:	2b40      	cmp	r3, #64	@ 0x40
 8004610:	d854      	bhi.n	80046bc <TIM_SlaveTimer_SetConfig+0x110>
 8004612:	2b30      	cmp	r3, #48	@ 0x30
 8004614:	d055      	beq.n	80046c2 <TIM_SlaveTimer_SetConfig+0x116>
 8004616:	2b30      	cmp	r3, #48	@ 0x30
 8004618:	d850      	bhi.n	80046bc <TIM_SlaveTimer_SetConfig+0x110>
 800461a:	2b20      	cmp	r3, #32
 800461c:	d051      	beq.n	80046c2 <TIM_SlaveTimer_SetConfig+0x116>
 800461e:	2b20      	cmp	r3, #32
 8004620:	d84c      	bhi.n	80046bc <TIM_SlaveTimer_SetConfig+0x110>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d04d      	beq.n	80046c2 <TIM_SlaveTimer_SetConfig+0x116>
 8004626:	2b10      	cmp	r3, #16
 8004628:	d04b      	beq.n	80046c2 <TIM_SlaveTimer_SetConfig+0x116>
 800462a:	e047      	b.n	80046bc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800463c:	f000 f9e4 	bl	8004a08 <TIM_ETR_SetConfig>
      break;
 8004640:	e040      	b.n	80046c4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d101      	bne.n	800464e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e03b      	b.n	80046c6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004674:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
      break;
 8004692:	e017      	b.n	80046c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a0:	461a      	mov	r2, r3
 80046a2:	f000 f887 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      break;
 80046a6:	e00d      	b.n	80046c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b4:	461a      	mov	r2, r3
 80046b6:	f000 f8e7 	bl	8004888 <TIM_TI2_ConfigInputStage>
      break;
 80046ba:	e003      	b.n	80046c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
      break;
 80046c0:	e000      	b.n	80046c4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80046c2:	bf00      	nop
  }

  return status;
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 0201 	bic.w	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a27      	ldr	r2, [pc, #156]	@ (8004798 <TIM_TI1_SetConfig+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01b      	beq.n	8004736 <TIM_TI1_SetConfig+0x66>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d017      	beq.n	8004736 <TIM_TI1_SetConfig+0x66>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a24      	ldr	r2, [pc, #144]	@ (800479c <TIM_TI1_SetConfig+0xcc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_TI1_SetConfig+0x66>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <TIM_TI1_SetConfig+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_TI1_SetConfig+0x66>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a22      	ldr	r2, [pc, #136]	@ (80047a4 <TIM_TI1_SetConfig+0xd4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_TI1_SetConfig+0x66>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <TIM_TI1_SetConfig+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_TI1_SetConfig+0x66>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a20      	ldr	r2, [pc, #128]	@ (80047ac <TIM_TI1_SetConfig+0xdc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_TI1_SetConfig+0x66>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <TIM_TI1_SetConfig+0xe0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <TIM_TI1_SetConfig+0x6a>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <TIM_TI1_SetConfig+0x6c>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e003      	b.n	800475a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	b2db      	uxtb	r3, r3
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f023 030a 	bic.w	r3, r3, #10
 8004774:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 030a 	and.w	r3, r3, #10
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40001800 	.word	0x40001800

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f023 0210 	bic.w	r2, r3, #16
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800483c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	031b      	lsls	r3, r3, #12
 8004854:	b29b      	uxth	r3, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004862:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0210 	bic.w	r2, r3, #16
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	031b      	lsls	r3, r3, #12
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	621a      	str	r2, [r3, #32]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004922:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	b2db      	uxtb	r3, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004936:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004988:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80049ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	031b      	lsls	r3, r3, #12
 80049b4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f043 0307 	orr.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	609a      	str	r2, [r3, #8]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	021a      	lsls	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b087      	sub	sp, #28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2201      	movs	r2, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	401a      	ands	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f003 031f 	and.w	r3, r3, #31
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e05a      	b.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a20      	ldr	r2, [pc, #128]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d022      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af4:	d01d      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1c      	ldr	r2, [pc, #112]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d018      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a16      	ldr	r2, [pc, #88]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d10c      	bne.n	8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40010400 	.word	0x40010400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40001800 	.word	0x40001800

08004b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e042      	b.n	8004c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fd f888 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	@ 0x24
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f971 	bl	8004eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d175      	bne.n	8004d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Transmit+0x2c>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e06e      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2221      	movs	r2, #33	@ 0x21
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c62:	f7fd f96b 	bl	8001f3c <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d108      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c98:	e02e      	b.n	8004cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	@ 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f848 	bl	8004d3a <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e03a      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e007      	b.n	8004cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1cb      	bne.n	8004c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2140      	movs	r1, #64	@ 0x40
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f814 	bl	8004d3a <UART_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e006      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	e03b      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d52:	d037      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7fd f8f2 	bl	8001f3c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e03a      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b80      	cmp	r3, #128	@ 0x80
 8004d80:	d020      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d01d      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d116      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f81d 	bl	8004dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2208      	movs	r2, #8
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e00f      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d0b4      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b095      	sub	sp, #84	@ 0x54
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e14:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d119      	bne.n	8004e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f023 0310 	bic.w	r3, r3, #16
 8004e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e84:	61ba      	str	r2, [r7, #24]
 8004e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	613b      	str	r3, [r7, #16]
   return(result);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ea6:	bf00      	nop
 8004ea8:	3754      	adds	r7, #84	@ 0x54
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb4:	b0c0      	sub	sp, #256	@ 0x100
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	ea40 0301 	orr.w	r3, r0, r1
 8004ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f08:	f021 010c 	bic.w	r1, r1, #12
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f16:	430b      	orrs	r3, r1
 8004f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2a:	6999      	ldr	r1, [r3, #24]
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	ea40 0301 	orr.w	r3, r0, r1
 8004f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b91      	ldr	r3, [pc, #580]	@ (8005184 <UART_SetConfig+0x2d4>)
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d005      	beq.n	8004f50 <UART_SetConfig+0xa0>
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8005188 <UART_SetConfig+0x2d8>)
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d104      	bne.n	8004f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fe fb0c 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 8004f54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f58:	e003      	b.n	8004f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f5a:	f7fe faf3 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f6c:	f040 8110 	bne.w	8005190 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f82:	4622      	mov	r2, r4
 8004f84:	462b      	mov	r3, r5
 8004f86:	1891      	adds	r1, r2, r2
 8004f88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f8a:	415b      	adcs	r3, r3
 8004f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	4604      	mov	r4, r0
 8004f98:	eb12 0804 	adds.w	r8, r2, r4
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	eb43 0904 	adc.w	r9, r3, r4
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fb6:	4690      	mov	r8, r2
 8004fb8:	4699      	mov	r9, r3
 8004fba:	4603      	mov	r3, r0
 8004fbc:	eb18 0303 	adds.w	r3, r8, r3
 8004fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	eb49 0303 	adc.w	r3, r9, r3
 8004fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	18db      	adds	r3, r3, r3
 8004fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fe8:	4613      	mov	r3, r2
 8004fea:	eb42 0303 	adc.w	r3, r2, r3
 8004fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ff8:	f7fb ffae 	bl	8000f58 <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4b62      	ldr	r3, [pc, #392]	@ (800518c <UART_SetConfig+0x2dc>)
 8005002:	fba3 2302 	umull	r2, r3, r3, r2
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	011c      	lsls	r4, r3, #4
 800500a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800500e:	2200      	movs	r2, #0
 8005010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800501c:	4642      	mov	r2, r8
 800501e:	464b      	mov	r3, r9
 8005020:	1891      	adds	r1, r2, r2
 8005022:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005024:	415b      	adcs	r3, r3
 8005026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800502c:	4645      	mov	r5, r8
 800502e:	eb12 0a05 	adds.w	sl, r2, r5
 8005032:	4640      	mov	r0, r8
 8005034:	4649      	mov	r1, r9
 8005036:	460d      	mov	r5, r1
 8005038:	eb43 0b05 	adc.w	fp, r3, r5
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005048:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800504c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005050:	4692      	mov	sl, r2
 8005052:	469b      	mov	fp, r3
 8005054:	4603      	mov	r3, r0
 8005056:	eb1a 0303 	adds.w	r3, sl, r3
 800505a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800505e:	460b      	mov	r3, r1
 8005060:	eb4b 0303 	adc.w	r3, fp, r3
 8005064:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005074:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800507c:	460b      	mov	r3, r1
 800507e:	18db      	adds	r3, r3, r3
 8005080:	643b      	str	r3, [r7, #64]	@ 0x40
 8005082:	4613      	mov	r3, r2
 8005084:	eb42 0303 	adc.w	r3, r2, r3
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
 800508a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800508e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005092:	f7fb ff61 	bl	8000f58 <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4611      	mov	r1, r2
 800509c:	4b3b      	ldr	r3, [pc, #236]	@ (800518c <UART_SetConfig+0x2dc>)
 800509e:	fba3 2301 	umull	r2, r3, r3, r1
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2264      	movs	r2, #100	@ 0x64
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	1acb      	subs	r3, r1, r3
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050b2:	4b36      	ldr	r3, [pc, #216]	@ (800518c <UART_SetConfig+0x2dc>)
 80050b4:	fba3 2302 	umull	r2, r3, r3, r2
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050c0:	441c      	add	r4, r3
 80050c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050d4:	4642      	mov	r2, r8
 80050d6:	464b      	mov	r3, r9
 80050d8:	1891      	adds	r1, r2, r2
 80050da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050dc:	415b      	adcs	r3, r3
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050e4:	4641      	mov	r1, r8
 80050e6:	1851      	adds	r1, r2, r1
 80050e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80050ea:	4649      	mov	r1, r9
 80050ec:	414b      	adcs	r3, r1
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050fc:	4659      	mov	r1, fp
 80050fe:	00cb      	lsls	r3, r1, #3
 8005100:	4655      	mov	r5, sl
 8005102:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005106:	4651      	mov	r1, sl
 8005108:	00ca      	lsls	r2, r1, #3
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	4603      	mov	r3, r0
 8005110:	4642      	mov	r2, r8
 8005112:	189b      	adds	r3, r3, r2
 8005114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005118:	464b      	mov	r3, r9
 800511a:	460a      	mov	r2, r1
 800511c:	eb42 0303 	adc.w	r3, r2, r3
 8005120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005130:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005138:	460b      	mov	r3, r1
 800513a:	18db      	adds	r3, r3, r3
 800513c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513e:	4613      	mov	r3, r2
 8005140:	eb42 0303 	adc.w	r3, r2, r3
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800514a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800514e:	f7fb ff03 	bl	8000f58 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <UART_SetConfig+0x2dc>)
 8005158:	fba3 1302 	umull	r1, r3, r3, r2
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	2164      	movs	r1, #100	@ 0x64
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	3332      	adds	r3, #50	@ 0x32
 800516a:	4a08      	ldr	r2, [pc, #32]	@ (800518c <UART_SetConfig+0x2dc>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	f003 0207 	and.w	r2, r3, #7
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4422      	add	r2, r4
 800517e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005180:	e10a      	b.n	8005398 <UART_SetConfig+0x4e8>
 8005182:	bf00      	nop
 8005184:	40011000 	.word	0x40011000
 8005188:	40011400 	.word	0x40011400
 800518c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005194:	2200      	movs	r2, #0
 8005196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800519a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800519e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051a2:	4642      	mov	r2, r8
 80051a4:	464b      	mov	r3, r9
 80051a6:	1891      	adds	r1, r2, r2
 80051a8:	6239      	str	r1, [r7, #32]
 80051aa:	415b      	adcs	r3, r3
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051b2:	4641      	mov	r1, r8
 80051b4:	1854      	adds	r4, r2, r1
 80051b6:	46cc      	mov	ip, r9
 80051b8:	eb43 050c 	adc.w	r5, r3, ip
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	00eb      	lsls	r3, r5, #3
 80051c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ca:	00e2      	lsls	r2, r4, #3
 80051cc:	4614      	mov	r4, r2
 80051ce:	461d      	mov	r5, r3
 80051d0:	4640      	mov	r0, r8
 80051d2:	4649      	mov	r1, r9
 80051d4:	4603      	mov	r3, r0
 80051d6:	18e3      	adds	r3, r4, r3
 80051d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051dc:	460b      	mov	r3, r1
 80051de:	eb45 0303 	adc.w	r3, r5, r3
 80051e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005202:	4629      	mov	r1, r5
 8005204:	008b      	lsls	r3, r1, #2
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	4604      	mov	r4, r0
 800520c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005210:	4601      	mov	r1, r0
 8005212:	008a      	lsls	r2, r1, #2
 8005214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005218:	f7fb fe9e 	bl	8000f58 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4b60      	ldr	r3, [pc, #384]	@ (80053a4 <UART_SetConfig+0x4f4>)
 8005222:	fba3 2302 	umull	r2, r3, r3, r2
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	011c      	lsls	r4, r3, #4
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800522e:	2200      	movs	r2, #0
 8005230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005234:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	1891      	adds	r1, r2, r2
 8005242:	61b9      	str	r1, [r7, #24]
 8005244:	415b      	adcs	r3, r3
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800524c:	4641      	mov	r1, r8
 800524e:	1851      	adds	r1, r2, r1
 8005250:	6139      	str	r1, [r7, #16]
 8005252:	4649      	mov	r1, r9
 8005254:	414b      	adcs	r3, r1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005264:	4659      	mov	r1, fp
 8005266:	00cb      	lsls	r3, r1, #3
 8005268:	4655      	mov	r5, sl
 800526a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800526e:	4651      	mov	r1, sl
 8005270:	00ca      	lsls	r2, r1, #3
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	4603      	mov	r3, r0
 8005278:	4642      	mov	r2, r8
 800527a:	189b      	adds	r3, r3, r2
 800527c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005280:	464b      	mov	r3, r9
 8005282:	460a      	mov	r2, r1
 8005284:	eb42 0303 	adc.w	r3, r2, r3
 8005288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005296:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052a4:	4649      	mov	r1, r9
 80052a6:	008b      	lsls	r3, r1, #2
 80052a8:	4645      	mov	r5, r8
 80052aa:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80052ae:	4641      	mov	r1, r8
 80052b0:	008a      	lsls	r2, r1, #2
 80052b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052b6:	f7fb fe4f 	bl	8000f58 <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	4b38      	ldr	r3, [pc, #224]	@ (80053a4 <UART_SetConfig+0x4f4>)
 80052c2:	fba3 2301 	umull	r2, r3, r3, r1
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	2264      	movs	r2, #100	@ 0x64
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	1acb      	subs	r3, r1, r3
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	3332      	adds	r3, #50	@ 0x32
 80052d4:	4a33      	ldr	r2, [pc, #204]	@ (80053a4 <UART_SetConfig+0x4f4>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052e0:	441c      	add	r4, r3
 80052e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e6:	2200      	movs	r2, #0
 80052e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80052ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	1891      	adds	r1, r2, r2
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	415b      	adcs	r3, r3
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005300:	4641      	mov	r1, r8
 8005302:	1851      	adds	r1, r2, r1
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	4649      	mov	r1, r9
 8005308:	414b      	adcs	r3, r1
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005318:	4659      	mov	r1, fp
 800531a:	00cb      	lsls	r3, r1, #3
 800531c:	4655      	mov	r5, sl
 800531e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005322:	4651      	mov	r1, sl
 8005324:	00ca      	lsls	r2, r1, #3
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	4603      	mov	r3, r0
 800532c:	4642      	mov	r2, r8
 800532e:	189b      	adds	r3, r3, r2
 8005330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005332:	464b      	mov	r3, r9
 8005334:	460a      	mov	r2, r1
 8005336:	eb42 0303 	adc.w	r3, r2, r3
 800533a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	663b      	str	r3, [r7, #96]	@ 0x60
 8005346:	667a      	str	r2, [r7, #100]	@ 0x64
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005354:	4649      	mov	r1, r9
 8005356:	008b      	lsls	r3, r1, #2
 8005358:	4645      	mov	r5, r8
 800535a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800535e:	4641      	mov	r1, r8
 8005360:	008a      	lsls	r2, r1, #2
 8005362:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005366:	f7fb fdf7 	bl	8000f58 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <UART_SetConfig+0x4f4>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	@ 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	3332      	adds	r3, #50	@ 0x32
 8005382:	4a08      	ldr	r2, [pc, #32]	@ (80053a4 <UART_SetConfig+0x4f4>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 020f 	and.w	r2, r3, #15
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4422      	add	r2, r4
 8005396:	609a      	str	r2, [r3, #8]
}
 8005398:	bf00      	nop
 800539a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800539e:	46bd      	mov	sp, r7
 80053a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053a4:	51eb851f 	.word	0x51eb851f

080053a8 <siprintf>:
 80053a8:	b40e      	push	{r1, r2, r3}
 80053aa:	b500      	push	{lr}
 80053ac:	b09c      	sub	sp, #112	@ 0x70
 80053ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80053b0:	9002      	str	r0, [sp, #8]
 80053b2:	9006      	str	r0, [sp, #24]
 80053b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053b8:	4809      	ldr	r0, [pc, #36]	@ (80053e0 <siprintf+0x38>)
 80053ba:	9107      	str	r1, [sp, #28]
 80053bc:	9104      	str	r1, [sp, #16]
 80053be:	4909      	ldr	r1, [pc, #36]	@ (80053e4 <siprintf+0x3c>)
 80053c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c4:	9105      	str	r1, [sp, #20]
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	a902      	add	r1, sp, #8
 80053cc:	f000 f994 	bl	80056f8 <_svfiprintf_r>
 80053d0:	9b02      	ldr	r3, [sp, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	b01c      	add	sp, #112	@ 0x70
 80053d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053dc:	b003      	add	sp, #12
 80053de:	4770      	bx	lr
 80053e0:	2000000c 	.word	0x2000000c
 80053e4:	ffff0208 	.word	0xffff0208

080053e8 <memset>:
 80053e8:	4402      	add	r2, r0
 80053ea:	4603      	mov	r3, r0
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d100      	bne.n	80053f2 <memset+0xa>
 80053f0:	4770      	bx	lr
 80053f2:	f803 1b01 	strb.w	r1, [r3], #1
 80053f6:	e7f9      	b.n	80053ec <memset+0x4>

080053f8 <__errno>:
 80053f8:	4b01      	ldr	r3, [pc, #4]	@ (8005400 <__errno+0x8>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	2000000c 	.word	0x2000000c

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4d0d      	ldr	r5, [pc, #52]	@ (800543c <__libc_init_array+0x38>)
 8005408:	4c0d      	ldr	r4, [pc, #52]	@ (8005440 <__libc_init_array+0x3c>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	2600      	movs	r6, #0
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	4d0b      	ldr	r5, [pc, #44]	@ (8005444 <__libc_init_array+0x40>)
 8005416:	4c0c      	ldr	r4, [pc, #48]	@ (8005448 <__libc_init_array+0x44>)
 8005418:	f000 fc66 	bl	8005ce8 <_init>
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	2600      	movs	r6, #0
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	08005dfc 	.word	0x08005dfc
 8005440:	08005dfc 	.word	0x08005dfc
 8005444:	08005dfc 	.word	0x08005dfc
 8005448:	08005e00 	.word	0x08005e00

0800544c <__retarget_lock_acquire_recursive>:
 800544c:	4770      	bx	lr

0800544e <__retarget_lock_release_recursive>:
 800544e:	4770      	bx	lr

08005450 <_free_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4605      	mov	r5, r0
 8005454:	2900      	cmp	r1, #0
 8005456:	d041      	beq.n	80054dc <_free_r+0x8c>
 8005458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800545c:	1f0c      	subs	r4, r1, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	bfb8      	it	lt
 8005462:	18e4      	addlt	r4, r4, r3
 8005464:	f000 f8e0 	bl	8005628 <__malloc_lock>
 8005468:	4a1d      	ldr	r2, [pc, #116]	@ (80054e0 <_free_r+0x90>)
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	b933      	cbnz	r3, 800547c <_free_r+0x2c>
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	6014      	str	r4, [r2, #0]
 8005472:	4628      	mov	r0, r5
 8005474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005478:	f000 b8dc 	b.w	8005634 <__malloc_unlock>
 800547c:	42a3      	cmp	r3, r4
 800547e:	d908      	bls.n	8005492 <_free_r+0x42>
 8005480:	6820      	ldr	r0, [r4, #0]
 8005482:	1821      	adds	r1, r4, r0
 8005484:	428b      	cmp	r3, r1
 8005486:	bf01      	itttt	eq
 8005488:	6819      	ldreq	r1, [r3, #0]
 800548a:	685b      	ldreq	r3, [r3, #4]
 800548c:	1809      	addeq	r1, r1, r0
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	e7ed      	b.n	800546e <_free_r+0x1e>
 8005492:	461a      	mov	r2, r3
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b10b      	cbz	r3, 800549c <_free_r+0x4c>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d9fa      	bls.n	8005492 <_free_r+0x42>
 800549c:	6811      	ldr	r1, [r2, #0]
 800549e:	1850      	adds	r0, r2, r1
 80054a0:	42a0      	cmp	r0, r4
 80054a2:	d10b      	bne.n	80054bc <_free_r+0x6c>
 80054a4:	6820      	ldr	r0, [r4, #0]
 80054a6:	4401      	add	r1, r0
 80054a8:	1850      	adds	r0, r2, r1
 80054aa:	4283      	cmp	r3, r0
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	d1e0      	bne.n	8005472 <_free_r+0x22>
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	6053      	str	r3, [r2, #4]
 80054b6:	4408      	add	r0, r1
 80054b8:	6010      	str	r0, [r2, #0]
 80054ba:	e7da      	b.n	8005472 <_free_r+0x22>
 80054bc:	d902      	bls.n	80054c4 <_free_r+0x74>
 80054be:	230c      	movs	r3, #12
 80054c0:	602b      	str	r3, [r5, #0]
 80054c2:	e7d6      	b.n	8005472 <_free_r+0x22>
 80054c4:	6820      	ldr	r0, [r4, #0]
 80054c6:	1821      	adds	r1, r4, r0
 80054c8:	428b      	cmp	r3, r1
 80054ca:	bf04      	itt	eq
 80054cc:	6819      	ldreq	r1, [r3, #0]
 80054ce:	685b      	ldreq	r3, [r3, #4]
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	bf04      	itt	eq
 80054d4:	1809      	addeq	r1, r1, r0
 80054d6:	6021      	streq	r1, [r4, #0]
 80054d8:	6054      	str	r4, [r2, #4]
 80054da:	e7ca      	b.n	8005472 <_free_r+0x22>
 80054dc:	bd38      	pop	{r3, r4, r5, pc}
 80054de:	bf00      	nop
 80054e0:	20000404 	.word	0x20000404

080054e4 <sbrk_aligned>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005524 <sbrk_aligned+0x40>)
 80054e8:	460c      	mov	r4, r1
 80054ea:	6831      	ldr	r1, [r6, #0]
 80054ec:	4605      	mov	r5, r0
 80054ee:	b911      	cbnz	r1, 80054f6 <sbrk_aligned+0x12>
 80054f0:	f000 fba6 	bl	8005c40 <_sbrk_r>
 80054f4:	6030      	str	r0, [r6, #0]
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 fba1 	bl	8005c40 <_sbrk_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d103      	bne.n	800550a <sbrk_aligned+0x26>
 8005502:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005506:	4620      	mov	r0, r4
 8005508:	bd70      	pop	{r4, r5, r6, pc}
 800550a:	1cc4      	adds	r4, r0, #3
 800550c:	f024 0403 	bic.w	r4, r4, #3
 8005510:	42a0      	cmp	r0, r4
 8005512:	d0f8      	beq.n	8005506 <sbrk_aligned+0x22>
 8005514:	1a21      	subs	r1, r4, r0
 8005516:	4628      	mov	r0, r5
 8005518:	f000 fb92 	bl	8005c40 <_sbrk_r>
 800551c:	3001      	adds	r0, #1
 800551e:	d1f2      	bne.n	8005506 <sbrk_aligned+0x22>
 8005520:	e7ef      	b.n	8005502 <sbrk_aligned+0x1e>
 8005522:	bf00      	nop
 8005524:	20000400 	.word	0x20000400

08005528 <_malloc_r>:
 8005528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800552c:	1ccd      	adds	r5, r1, #3
 800552e:	f025 0503 	bic.w	r5, r5, #3
 8005532:	3508      	adds	r5, #8
 8005534:	2d0c      	cmp	r5, #12
 8005536:	bf38      	it	cc
 8005538:	250c      	movcc	r5, #12
 800553a:	2d00      	cmp	r5, #0
 800553c:	4606      	mov	r6, r0
 800553e:	db01      	blt.n	8005544 <_malloc_r+0x1c>
 8005540:	42a9      	cmp	r1, r5
 8005542:	d904      	bls.n	800554e <_malloc_r+0x26>
 8005544:	230c      	movs	r3, #12
 8005546:	6033      	str	r3, [r6, #0]
 8005548:	2000      	movs	r0, #0
 800554a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005624 <_malloc_r+0xfc>
 8005552:	f000 f869 	bl	8005628 <__malloc_lock>
 8005556:	f8d8 3000 	ldr.w	r3, [r8]
 800555a:	461c      	mov	r4, r3
 800555c:	bb44      	cbnz	r4, 80055b0 <_malloc_r+0x88>
 800555e:	4629      	mov	r1, r5
 8005560:	4630      	mov	r0, r6
 8005562:	f7ff ffbf 	bl	80054e4 <sbrk_aligned>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	4604      	mov	r4, r0
 800556a:	d158      	bne.n	800561e <_malloc_r+0xf6>
 800556c:	f8d8 4000 	ldr.w	r4, [r8]
 8005570:	4627      	mov	r7, r4
 8005572:	2f00      	cmp	r7, #0
 8005574:	d143      	bne.n	80055fe <_malloc_r+0xd6>
 8005576:	2c00      	cmp	r4, #0
 8005578:	d04b      	beq.n	8005612 <_malloc_r+0xea>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	4639      	mov	r1, r7
 800557e:	4630      	mov	r0, r6
 8005580:	eb04 0903 	add.w	r9, r4, r3
 8005584:	f000 fb5c 	bl	8005c40 <_sbrk_r>
 8005588:	4581      	cmp	r9, r0
 800558a:	d142      	bne.n	8005612 <_malloc_r+0xea>
 800558c:	6821      	ldr	r1, [r4, #0]
 800558e:	1a6d      	subs	r5, r5, r1
 8005590:	4629      	mov	r1, r5
 8005592:	4630      	mov	r0, r6
 8005594:	f7ff ffa6 	bl	80054e4 <sbrk_aligned>
 8005598:	3001      	adds	r0, #1
 800559a:	d03a      	beq.n	8005612 <_malloc_r+0xea>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	442b      	add	r3, r5
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	f8d8 3000 	ldr.w	r3, [r8]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	bb62      	cbnz	r2, 8005604 <_malloc_r+0xdc>
 80055aa:	f8c8 7000 	str.w	r7, [r8]
 80055ae:	e00f      	b.n	80055d0 <_malloc_r+0xa8>
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	1b52      	subs	r2, r2, r5
 80055b4:	d420      	bmi.n	80055f8 <_malloc_r+0xd0>
 80055b6:	2a0b      	cmp	r2, #11
 80055b8:	d917      	bls.n	80055ea <_malloc_r+0xc2>
 80055ba:	1961      	adds	r1, r4, r5
 80055bc:	42a3      	cmp	r3, r4
 80055be:	6025      	str	r5, [r4, #0]
 80055c0:	bf18      	it	ne
 80055c2:	6059      	strne	r1, [r3, #4]
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	bf08      	it	eq
 80055c8:	f8c8 1000 	streq.w	r1, [r8]
 80055cc:	5162      	str	r2, [r4, r5]
 80055ce:	604b      	str	r3, [r1, #4]
 80055d0:	4630      	mov	r0, r6
 80055d2:	f000 f82f 	bl	8005634 <__malloc_unlock>
 80055d6:	f104 000b 	add.w	r0, r4, #11
 80055da:	1d23      	adds	r3, r4, #4
 80055dc:	f020 0007 	bic.w	r0, r0, #7
 80055e0:	1ac2      	subs	r2, r0, r3
 80055e2:	bf1c      	itt	ne
 80055e4:	1a1b      	subne	r3, r3, r0
 80055e6:	50a3      	strne	r3, [r4, r2]
 80055e8:	e7af      	b.n	800554a <_malloc_r+0x22>
 80055ea:	6862      	ldr	r2, [r4, #4]
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	bf0c      	ite	eq
 80055f0:	f8c8 2000 	streq.w	r2, [r8]
 80055f4:	605a      	strne	r2, [r3, #4]
 80055f6:	e7eb      	b.n	80055d0 <_malloc_r+0xa8>
 80055f8:	4623      	mov	r3, r4
 80055fa:	6864      	ldr	r4, [r4, #4]
 80055fc:	e7ae      	b.n	800555c <_malloc_r+0x34>
 80055fe:	463c      	mov	r4, r7
 8005600:	687f      	ldr	r7, [r7, #4]
 8005602:	e7b6      	b.n	8005572 <_malloc_r+0x4a>
 8005604:	461a      	mov	r2, r3
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	42a3      	cmp	r3, r4
 800560a:	d1fb      	bne.n	8005604 <_malloc_r+0xdc>
 800560c:	2300      	movs	r3, #0
 800560e:	6053      	str	r3, [r2, #4]
 8005610:	e7de      	b.n	80055d0 <_malloc_r+0xa8>
 8005612:	230c      	movs	r3, #12
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	4630      	mov	r0, r6
 8005618:	f000 f80c 	bl	8005634 <__malloc_unlock>
 800561c:	e794      	b.n	8005548 <_malloc_r+0x20>
 800561e:	6005      	str	r5, [r0, #0]
 8005620:	e7d6      	b.n	80055d0 <_malloc_r+0xa8>
 8005622:	bf00      	nop
 8005624:	20000404 	.word	0x20000404

08005628 <__malloc_lock>:
 8005628:	4801      	ldr	r0, [pc, #4]	@ (8005630 <__malloc_lock+0x8>)
 800562a:	f7ff bf0f 	b.w	800544c <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	200003fc 	.word	0x200003fc

08005634 <__malloc_unlock>:
 8005634:	4801      	ldr	r0, [pc, #4]	@ (800563c <__malloc_unlock+0x8>)
 8005636:	f7ff bf0a 	b.w	800544e <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	200003fc 	.word	0x200003fc

08005640 <__ssputs_r>:
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	688e      	ldr	r6, [r1, #8]
 8005646:	461f      	mov	r7, r3
 8005648:	42be      	cmp	r6, r7
 800564a:	680b      	ldr	r3, [r1, #0]
 800564c:	4682      	mov	sl, r0
 800564e:	460c      	mov	r4, r1
 8005650:	4690      	mov	r8, r2
 8005652:	d82d      	bhi.n	80056b0 <__ssputs_r+0x70>
 8005654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005658:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800565c:	d026      	beq.n	80056ac <__ssputs_r+0x6c>
 800565e:	6965      	ldr	r5, [r4, #20]
 8005660:	6909      	ldr	r1, [r1, #16]
 8005662:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005666:	eba3 0901 	sub.w	r9, r3, r1
 800566a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800566e:	1c7b      	adds	r3, r7, #1
 8005670:	444b      	add	r3, r9
 8005672:	106d      	asrs	r5, r5, #1
 8005674:	429d      	cmp	r5, r3
 8005676:	bf38      	it	cc
 8005678:	461d      	movcc	r5, r3
 800567a:	0553      	lsls	r3, r2, #21
 800567c:	d527      	bpl.n	80056ce <__ssputs_r+0x8e>
 800567e:	4629      	mov	r1, r5
 8005680:	f7ff ff52 	bl	8005528 <_malloc_r>
 8005684:	4606      	mov	r6, r0
 8005686:	b360      	cbz	r0, 80056e2 <__ssputs_r+0xa2>
 8005688:	6921      	ldr	r1, [r4, #16]
 800568a:	464a      	mov	r2, r9
 800568c:	f000 fae8 	bl	8005c60 <memcpy>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	6126      	str	r6, [r4, #16]
 800569e:	6165      	str	r5, [r4, #20]
 80056a0:	444e      	add	r6, r9
 80056a2:	eba5 0509 	sub.w	r5, r5, r9
 80056a6:	6026      	str	r6, [r4, #0]
 80056a8:	60a5      	str	r5, [r4, #8]
 80056aa:	463e      	mov	r6, r7
 80056ac:	42be      	cmp	r6, r7
 80056ae:	d900      	bls.n	80056b2 <__ssputs_r+0x72>
 80056b0:	463e      	mov	r6, r7
 80056b2:	6820      	ldr	r0, [r4, #0]
 80056b4:	4632      	mov	r2, r6
 80056b6:	4641      	mov	r1, r8
 80056b8:	f000 faa8 	bl	8005c0c <memmove>
 80056bc:	68a3      	ldr	r3, [r4, #8]
 80056be:	1b9b      	subs	r3, r3, r6
 80056c0:	60a3      	str	r3, [r4, #8]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	4433      	add	r3, r6
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	2000      	movs	r0, #0
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	462a      	mov	r2, r5
 80056d0:	f000 fad4 	bl	8005c7c <_realloc_r>
 80056d4:	4606      	mov	r6, r0
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d1e0      	bne.n	800569c <__ssputs_r+0x5c>
 80056da:	6921      	ldr	r1, [r4, #16]
 80056dc:	4650      	mov	r0, sl
 80056de:	f7ff feb7 	bl	8005450 <_free_r>
 80056e2:	230c      	movs	r3, #12
 80056e4:	f8ca 3000 	str.w	r3, [sl]
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056f4:	e7e9      	b.n	80056ca <__ssputs_r+0x8a>
	...

080056f8 <_svfiprintf_r>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	4698      	mov	r8, r3
 80056fe:	898b      	ldrh	r3, [r1, #12]
 8005700:	061b      	lsls	r3, r3, #24
 8005702:	b09d      	sub	sp, #116	@ 0x74
 8005704:	4607      	mov	r7, r0
 8005706:	460d      	mov	r5, r1
 8005708:	4614      	mov	r4, r2
 800570a:	d510      	bpl.n	800572e <_svfiprintf_r+0x36>
 800570c:	690b      	ldr	r3, [r1, #16]
 800570e:	b973      	cbnz	r3, 800572e <_svfiprintf_r+0x36>
 8005710:	2140      	movs	r1, #64	@ 0x40
 8005712:	f7ff ff09 	bl	8005528 <_malloc_r>
 8005716:	6028      	str	r0, [r5, #0]
 8005718:	6128      	str	r0, [r5, #16]
 800571a:	b930      	cbnz	r0, 800572a <_svfiprintf_r+0x32>
 800571c:	230c      	movs	r3, #12
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005724:	b01d      	add	sp, #116	@ 0x74
 8005726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572a:	2340      	movs	r3, #64	@ 0x40
 800572c:	616b      	str	r3, [r5, #20]
 800572e:	2300      	movs	r3, #0
 8005730:	9309      	str	r3, [sp, #36]	@ 0x24
 8005732:	2320      	movs	r3, #32
 8005734:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005738:	f8cd 800c 	str.w	r8, [sp, #12]
 800573c:	2330      	movs	r3, #48	@ 0x30
 800573e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058dc <_svfiprintf_r+0x1e4>
 8005742:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005746:	f04f 0901 	mov.w	r9, #1
 800574a:	4623      	mov	r3, r4
 800574c:	469a      	mov	sl, r3
 800574e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005752:	b10a      	cbz	r2, 8005758 <_svfiprintf_r+0x60>
 8005754:	2a25      	cmp	r2, #37	@ 0x25
 8005756:	d1f9      	bne.n	800574c <_svfiprintf_r+0x54>
 8005758:	ebba 0b04 	subs.w	fp, sl, r4
 800575c:	d00b      	beq.n	8005776 <_svfiprintf_r+0x7e>
 800575e:	465b      	mov	r3, fp
 8005760:	4622      	mov	r2, r4
 8005762:	4629      	mov	r1, r5
 8005764:	4638      	mov	r0, r7
 8005766:	f7ff ff6b 	bl	8005640 <__ssputs_r>
 800576a:	3001      	adds	r0, #1
 800576c:	f000 80a7 	beq.w	80058be <_svfiprintf_r+0x1c6>
 8005770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005772:	445a      	add	r2, fp
 8005774:	9209      	str	r2, [sp, #36]	@ 0x24
 8005776:	f89a 3000 	ldrb.w	r3, [sl]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 809f 	beq.w	80058be <_svfiprintf_r+0x1c6>
 8005780:	2300      	movs	r3, #0
 8005782:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800578a:	f10a 0a01 	add.w	sl, sl, #1
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	9307      	str	r3, [sp, #28]
 8005792:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005796:	931a      	str	r3, [sp, #104]	@ 0x68
 8005798:	4654      	mov	r4, sl
 800579a:	2205      	movs	r2, #5
 800579c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a0:	484e      	ldr	r0, [pc, #312]	@ (80058dc <_svfiprintf_r+0x1e4>)
 80057a2:	f7fa fd1d 	bl	80001e0 <memchr>
 80057a6:	9a04      	ldr	r2, [sp, #16]
 80057a8:	b9d8      	cbnz	r0, 80057e2 <_svfiprintf_r+0xea>
 80057aa:	06d0      	lsls	r0, r2, #27
 80057ac:	bf44      	itt	mi
 80057ae:	2320      	movmi	r3, #32
 80057b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057b4:	0711      	lsls	r1, r2, #28
 80057b6:	bf44      	itt	mi
 80057b8:	232b      	movmi	r3, #43	@ 0x2b
 80057ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057be:	f89a 3000 	ldrb.w	r3, [sl]
 80057c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c4:	d015      	beq.n	80057f2 <_svfiprintf_r+0xfa>
 80057c6:	9a07      	ldr	r2, [sp, #28]
 80057c8:	4654      	mov	r4, sl
 80057ca:	2000      	movs	r0, #0
 80057cc:	f04f 0c0a 	mov.w	ip, #10
 80057d0:	4621      	mov	r1, r4
 80057d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057d6:	3b30      	subs	r3, #48	@ 0x30
 80057d8:	2b09      	cmp	r3, #9
 80057da:	d94b      	bls.n	8005874 <_svfiprintf_r+0x17c>
 80057dc:	b1b0      	cbz	r0, 800580c <_svfiprintf_r+0x114>
 80057de:	9207      	str	r2, [sp, #28]
 80057e0:	e014      	b.n	800580c <_svfiprintf_r+0x114>
 80057e2:	eba0 0308 	sub.w	r3, r0, r8
 80057e6:	fa09 f303 	lsl.w	r3, r9, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	46a2      	mov	sl, r4
 80057f0:	e7d2      	b.n	8005798 <_svfiprintf_r+0xa0>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	1d19      	adds	r1, r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	9103      	str	r1, [sp, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfbb      	ittet	lt
 80057fe:	425b      	neglt	r3, r3
 8005800:	f042 0202 	orrlt.w	r2, r2, #2
 8005804:	9307      	strge	r3, [sp, #28]
 8005806:	9307      	strlt	r3, [sp, #28]
 8005808:	bfb8      	it	lt
 800580a:	9204      	strlt	r2, [sp, #16]
 800580c:	7823      	ldrb	r3, [r4, #0]
 800580e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005810:	d10a      	bne.n	8005828 <_svfiprintf_r+0x130>
 8005812:	7863      	ldrb	r3, [r4, #1]
 8005814:	2b2a      	cmp	r3, #42	@ 0x2a
 8005816:	d132      	bne.n	800587e <_svfiprintf_r+0x186>
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	9203      	str	r2, [sp, #12]
 8005820:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005824:	3402      	adds	r4, #2
 8005826:	9305      	str	r3, [sp, #20]
 8005828:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80058e0 <_svfiprintf_r+0x1e8>
 800582c:	7821      	ldrb	r1, [r4, #0]
 800582e:	2203      	movs	r2, #3
 8005830:	4650      	mov	r0, sl
 8005832:	f7fa fcd5 	bl	80001e0 <memchr>
 8005836:	b138      	cbz	r0, 8005848 <_svfiprintf_r+0x150>
 8005838:	9b04      	ldr	r3, [sp, #16]
 800583a:	eba0 000a 	sub.w	r0, r0, sl
 800583e:	2240      	movs	r2, #64	@ 0x40
 8005840:	4082      	lsls	r2, r0
 8005842:	4313      	orrs	r3, r2
 8005844:	3401      	adds	r4, #1
 8005846:	9304      	str	r3, [sp, #16]
 8005848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584c:	4825      	ldr	r0, [pc, #148]	@ (80058e4 <_svfiprintf_r+0x1ec>)
 800584e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005852:	2206      	movs	r2, #6
 8005854:	f7fa fcc4 	bl	80001e0 <memchr>
 8005858:	2800      	cmp	r0, #0
 800585a:	d036      	beq.n	80058ca <_svfiprintf_r+0x1d2>
 800585c:	4b22      	ldr	r3, [pc, #136]	@ (80058e8 <_svfiprintf_r+0x1f0>)
 800585e:	bb1b      	cbnz	r3, 80058a8 <_svfiprintf_r+0x1b0>
 8005860:	9b03      	ldr	r3, [sp, #12]
 8005862:	3307      	adds	r3, #7
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	3308      	adds	r3, #8
 800586a:	9303      	str	r3, [sp, #12]
 800586c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800586e:	4433      	add	r3, r6
 8005870:	9309      	str	r3, [sp, #36]	@ 0x24
 8005872:	e76a      	b.n	800574a <_svfiprintf_r+0x52>
 8005874:	fb0c 3202 	mla	r2, ip, r2, r3
 8005878:	460c      	mov	r4, r1
 800587a:	2001      	movs	r0, #1
 800587c:	e7a8      	b.n	80057d0 <_svfiprintf_r+0xd8>
 800587e:	2300      	movs	r3, #0
 8005880:	3401      	adds	r4, #1
 8005882:	9305      	str	r3, [sp, #20]
 8005884:	4619      	mov	r1, r3
 8005886:	f04f 0c0a 	mov.w	ip, #10
 800588a:	4620      	mov	r0, r4
 800588c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005890:	3a30      	subs	r2, #48	@ 0x30
 8005892:	2a09      	cmp	r2, #9
 8005894:	d903      	bls.n	800589e <_svfiprintf_r+0x1a6>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0c6      	beq.n	8005828 <_svfiprintf_r+0x130>
 800589a:	9105      	str	r1, [sp, #20]
 800589c:	e7c4      	b.n	8005828 <_svfiprintf_r+0x130>
 800589e:	fb0c 2101 	mla	r1, ip, r1, r2
 80058a2:	4604      	mov	r4, r0
 80058a4:	2301      	movs	r3, #1
 80058a6:	e7f0      	b.n	800588a <_svfiprintf_r+0x192>
 80058a8:	ab03      	add	r3, sp, #12
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	462a      	mov	r2, r5
 80058ae:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <_svfiprintf_r+0x1f4>)
 80058b0:	a904      	add	r1, sp, #16
 80058b2:	4638      	mov	r0, r7
 80058b4:	f3af 8000 	nop.w
 80058b8:	1c42      	adds	r2, r0, #1
 80058ba:	4606      	mov	r6, r0
 80058bc:	d1d6      	bne.n	800586c <_svfiprintf_r+0x174>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	065b      	lsls	r3, r3, #25
 80058c2:	f53f af2d 	bmi.w	8005720 <_svfiprintf_r+0x28>
 80058c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058c8:	e72c      	b.n	8005724 <_svfiprintf_r+0x2c>
 80058ca:	ab03      	add	r3, sp, #12
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	462a      	mov	r2, r5
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <_svfiprintf_r+0x1f4>)
 80058d2:	a904      	add	r1, sp, #16
 80058d4:	4638      	mov	r0, r7
 80058d6:	f000 f879 	bl	80059cc <_printf_i>
 80058da:	e7ed      	b.n	80058b8 <_svfiprintf_r+0x1c0>
 80058dc:	08005dc0 	.word	0x08005dc0
 80058e0:	08005dc6 	.word	0x08005dc6
 80058e4:	08005dca 	.word	0x08005dca
 80058e8:	00000000 	.word	0x00000000
 80058ec:	08005641 	.word	0x08005641

080058f0 <_printf_common>:
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	4616      	mov	r6, r2
 80058f6:	4698      	mov	r8, r3
 80058f8:	688a      	ldr	r2, [r1, #8]
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005900:	4293      	cmp	r3, r2
 8005902:	bfb8      	it	lt
 8005904:	4613      	movlt	r3, r2
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800590c:	4607      	mov	r7, r0
 800590e:	460c      	mov	r4, r1
 8005910:	b10a      	cbz	r2, 8005916 <_printf_common+0x26>
 8005912:	3301      	adds	r3, #1
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	0699      	lsls	r1, r3, #26
 800591a:	bf42      	ittt	mi
 800591c:	6833      	ldrmi	r3, [r6, #0]
 800591e:	3302      	addmi	r3, #2
 8005920:	6033      	strmi	r3, [r6, #0]
 8005922:	6825      	ldr	r5, [r4, #0]
 8005924:	f015 0506 	ands.w	r5, r5, #6
 8005928:	d106      	bne.n	8005938 <_printf_common+0x48>
 800592a:	f104 0a19 	add.w	sl, r4, #25
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	6832      	ldr	r2, [r6, #0]
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	42ab      	cmp	r3, r5
 8005936:	dc26      	bgt.n	8005986 <_printf_common+0x96>
 8005938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	3b00      	subs	r3, #0
 8005940:	bf18      	it	ne
 8005942:	2301      	movne	r3, #1
 8005944:	0692      	lsls	r2, r2, #26
 8005946:	d42b      	bmi.n	80059a0 <_printf_common+0xb0>
 8005948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800594c:	4641      	mov	r1, r8
 800594e:	4638      	mov	r0, r7
 8005950:	47c8      	blx	r9
 8005952:	3001      	adds	r0, #1
 8005954:	d01e      	beq.n	8005994 <_printf_common+0xa4>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	f003 0306 	and.w	r3, r3, #6
 800595e:	2b04      	cmp	r3, #4
 8005960:	bf02      	ittt	eq
 8005962:	68e5      	ldreq	r5, [r4, #12]
 8005964:	6833      	ldreq	r3, [r6, #0]
 8005966:	1aed      	subeq	r5, r5, r3
 8005968:	68a3      	ldr	r3, [r4, #8]
 800596a:	bf0c      	ite	eq
 800596c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005970:	2500      	movne	r5, #0
 8005972:	4293      	cmp	r3, r2
 8005974:	bfc4      	itt	gt
 8005976:	1a9b      	subgt	r3, r3, r2
 8005978:	18ed      	addgt	r5, r5, r3
 800597a:	2600      	movs	r6, #0
 800597c:	341a      	adds	r4, #26
 800597e:	42b5      	cmp	r5, r6
 8005980:	d11a      	bne.n	80059b8 <_printf_common+0xc8>
 8005982:	2000      	movs	r0, #0
 8005984:	e008      	b.n	8005998 <_printf_common+0xa8>
 8005986:	2301      	movs	r3, #1
 8005988:	4652      	mov	r2, sl
 800598a:	4641      	mov	r1, r8
 800598c:	4638      	mov	r0, r7
 800598e:	47c8      	blx	r9
 8005990:	3001      	adds	r0, #1
 8005992:	d103      	bne.n	800599c <_printf_common+0xac>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599c:	3501      	adds	r5, #1
 800599e:	e7c6      	b.n	800592e <_printf_common+0x3e>
 80059a0:	18e1      	adds	r1, r4, r3
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	2030      	movs	r0, #48	@ 0x30
 80059a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059aa:	4422      	add	r2, r4
 80059ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059b4:	3302      	adds	r3, #2
 80059b6:	e7c7      	b.n	8005948 <_printf_common+0x58>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4622      	mov	r2, r4
 80059bc:	4641      	mov	r1, r8
 80059be:	4638      	mov	r0, r7
 80059c0:	47c8      	blx	r9
 80059c2:	3001      	adds	r0, #1
 80059c4:	d0e6      	beq.n	8005994 <_printf_common+0xa4>
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7d9      	b.n	800597e <_printf_common+0x8e>
	...

080059cc <_printf_i>:
 80059cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	7e0f      	ldrb	r7, [r1, #24]
 80059d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059d4:	2f78      	cmp	r7, #120	@ 0x78
 80059d6:	4691      	mov	r9, r2
 80059d8:	4680      	mov	r8, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	469a      	mov	sl, r3
 80059de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059e2:	d807      	bhi.n	80059f4 <_printf_i+0x28>
 80059e4:	2f62      	cmp	r7, #98	@ 0x62
 80059e6:	d80a      	bhi.n	80059fe <_printf_i+0x32>
 80059e8:	2f00      	cmp	r7, #0
 80059ea:	f000 80d2 	beq.w	8005b92 <_printf_i+0x1c6>
 80059ee:	2f58      	cmp	r7, #88	@ 0x58
 80059f0:	f000 80b9 	beq.w	8005b66 <_printf_i+0x19a>
 80059f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059fc:	e03a      	b.n	8005a74 <_printf_i+0xa8>
 80059fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a02:	2b15      	cmp	r3, #21
 8005a04:	d8f6      	bhi.n	80059f4 <_printf_i+0x28>
 8005a06:	a101      	add	r1, pc, #4	@ (adr r1, 8005a0c <_printf_i+0x40>)
 8005a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a0c:	08005a65 	.word	0x08005a65
 8005a10:	08005a79 	.word	0x08005a79
 8005a14:	080059f5 	.word	0x080059f5
 8005a18:	080059f5 	.word	0x080059f5
 8005a1c:	080059f5 	.word	0x080059f5
 8005a20:	080059f5 	.word	0x080059f5
 8005a24:	08005a79 	.word	0x08005a79
 8005a28:	080059f5 	.word	0x080059f5
 8005a2c:	080059f5 	.word	0x080059f5
 8005a30:	080059f5 	.word	0x080059f5
 8005a34:	080059f5 	.word	0x080059f5
 8005a38:	08005b79 	.word	0x08005b79
 8005a3c:	08005aa3 	.word	0x08005aa3
 8005a40:	08005b33 	.word	0x08005b33
 8005a44:	080059f5 	.word	0x080059f5
 8005a48:	080059f5 	.word	0x080059f5
 8005a4c:	08005b9b 	.word	0x08005b9b
 8005a50:	080059f5 	.word	0x080059f5
 8005a54:	08005aa3 	.word	0x08005aa3
 8005a58:	080059f5 	.word	0x080059f5
 8005a5c:	080059f5 	.word	0x080059f5
 8005a60:	08005b3b 	.word	0x08005b3b
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	1d1a      	adds	r2, r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6032      	str	r2, [r6, #0]
 8005a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a74:	2301      	movs	r3, #1
 8005a76:	e09d      	b.n	8005bb4 <_printf_i+0x1e8>
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	6820      	ldr	r0, [r4, #0]
 8005a7c:	1d19      	adds	r1, r3, #4
 8005a7e:	6031      	str	r1, [r6, #0]
 8005a80:	0606      	lsls	r6, r0, #24
 8005a82:	d501      	bpl.n	8005a88 <_printf_i+0xbc>
 8005a84:	681d      	ldr	r5, [r3, #0]
 8005a86:	e003      	b.n	8005a90 <_printf_i+0xc4>
 8005a88:	0645      	lsls	r5, r0, #25
 8005a8a:	d5fb      	bpl.n	8005a84 <_printf_i+0xb8>
 8005a8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	da03      	bge.n	8005a9c <_printf_i+0xd0>
 8005a94:	232d      	movs	r3, #45	@ 0x2d
 8005a96:	426d      	negs	r5, r5
 8005a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a9c:	4859      	ldr	r0, [pc, #356]	@ (8005c04 <_printf_i+0x238>)
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	e011      	b.n	8005ac6 <_printf_i+0xfa>
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	0608      	lsls	r0, r1, #24
 8005aa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005aac:	d402      	bmi.n	8005ab4 <_printf_i+0xe8>
 8005aae:	0649      	lsls	r1, r1, #25
 8005ab0:	bf48      	it	mi
 8005ab2:	b2ad      	uxthmi	r5, r5
 8005ab4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ab6:	4853      	ldr	r0, [pc, #332]	@ (8005c04 <_printf_i+0x238>)
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	bf14      	ite	ne
 8005abc:	230a      	movne	r3, #10
 8005abe:	2308      	moveq	r3, #8
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ac6:	6866      	ldr	r6, [r4, #4]
 8005ac8:	60a6      	str	r6, [r4, #8]
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	bfa2      	ittt	ge
 8005ace:	6821      	ldrge	r1, [r4, #0]
 8005ad0:	f021 0104 	bicge.w	r1, r1, #4
 8005ad4:	6021      	strge	r1, [r4, #0]
 8005ad6:	b90d      	cbnz	r5, 8005adc <_printf_i+0x110>
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	d04b      	beq.n	8005b74 <_printf_i+0x1a8>
 8005adc:	4616      	mov	r6, r2
 8005ade:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ae2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ae6:	5dc7      	ldrb	r7, [r0, r7]
 8005ae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aec:	462f      	mov	r7, r5
 8005aee:	42bb      	cmp	r3, r7
 8005af0:	460d      	mov	r5, r1
 8005af2:	d9f4      	bls.n	8005ade <_printf_i+0x112>
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d10b      	bne.n	8005b10 <_printf_i+0x144>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	07df      	lsls	r7, r3, #31
 8005afc:	d508      	bpl.n	8005b10 <_printf_i+0x144>
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	6861      	ldr	r1, [r4, #4]
 8005b02:	4299      	cmp	r1, r3
 8005b04:	bfde      	ittt	le
 8005b06:	2330      	movle	r3, #48	@ 0x30
 8005b08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b0c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005b10:	1b92      	subs	r2, r2, r6
 8005b12:	6122      	str	r2, [r4, #16]
 8005b14:	f8cd a000 	str.w	sl, [sp]
 8005b18:	464b      	mov	r3, r9
 8005b1a:	aa03      	add	r2, sp, #12
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4640      	mov	r0, r8
 8005b20:	f7ff fee6 	bl	80058f0 <_printf_common>
 8005b24:	3001      	adds	r0, #1
 8005b26:	d14a      	bne.n	8005bbe <_printf_i+0x1f2>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b2c:	b004      	add	sp, #16
 8005b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f043 0320 	orr.w	r3, r3, #32
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	4833      	ldr	r0, [pc, #204]	@ (8005c08 <_printf_i+0x23c>)
 8005b3c:	2778      	movs	r7, #120	@ 0x78
 8005b3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6831      	ldr	r1, [r6, #0]
 8005b46:	061f      	lsls	r7, r3, #24
 8005b48:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b4c:	d402      	bmi.n	8005b54 <_printf_i+0x188>
 8005b4e:	065f      	lsls	r7, r3, #25
 8005b50:	bf48      	it	mi
 8005b52:	b2ad      	uxthmi	r5, r5
 8005b54:	6031      	str	r1, [r6, #0]
 8005b56:	07d9      	lsls	r1, r3, #31
 8005b58:	bf44      	itt	mi
 8005b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b5e:	6023      	strmi	r3, [r4, #0]
 8005b60:	b11d      	cbz	r5, 8005b6a <_printf_i+0x19e>
 8005b62:	2310      	movs	r3, #16
 8005b64:	e7ac      	b.n	8005ac0 <_printf_i+0xf4>
 8005b66:	4827      	ldr	r0, [pc, #156]	@ (8005c04 <_printf_i+0x238>)
 8005b68:	e7e9      	b.n	8005b3e <_printf_i+0x172>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	f023 0320 	bic.w	r3, r3, #32
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	e7f6      	b.n	8005b62 <_printf_i+0x196>
 8005b74:	4616      	mov	r6, r2
 8005b76:	e7bd      	b.n	8005af4 <_printf_i+0x128>
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	6825      	ldr	r5, [r4, #0]
 8005b7c:	6961      	ldr	r1, [r4, #20]
 8005b7e:	1d18      	adds	r0, r3, #4
 8005b80:	6030      	str	r0, [r6, #0]
 8005b82:	062e      	lsls	r6, r5, #24
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0x1c0>
 8005b88:	6019      	str	r1, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0x1c6>
 8005b8c:	0668      	lsls	r0, r5, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0x1bc>
 8005b90:	8019      	strh	r1, [r3, #0]
 8005b92:	2300      	movs	r3, #0
 8005b94:	6123      	str	r3, [r4, #16]
 8005b96:	4616      	mov	r6, r2
 8005b98:	e7bc      	b.n	8005b14 <_printf_i+0x148>
 8005b9a:	6833      	ldr	r3, [r6, #0]
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	6032      	str	r2, [r6, #0]
 8005ba0:	681e      	ldr	r6, [r3, #0]
 8005ba2:	6862      	ldr	r2, [r4, #4]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7fa fb1a 	bl	80001e0 <memchr>
 8005bac:	b108      	cbz	r0, 8005bb2 <_printf_i+0x1e6>
 8005bae:	1b80      	subs	r0, r0, r6
 8005bb0:	6060      	str	r0, [r4, #4]
 8005bb2:	6863      	ldr	r3, [r4, #4]
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bbc:	e7aa      	b.n	8005b14 <_printf_i+0x148>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	47d0      	blx	sl
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d0ad      	beq.n	8005b28 <_printf_i+0x15c>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	079b      	lsls	r3, r3, #30
 8005bd0:	d413      	bmi.n	8005bfa <_printf_i+0x22e>
 8005bd2:	68e0      	ldr	r0, [r4, #12]
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	4298      	cmp	r0, r3
 8005bd8:	bfb8      	it	lt
 8005bda:	4618      	movlt	r0, r3
 8005bdc:	e7a6      	b.n	8005b2c <_printf_i+0x160>
 8005bde:	2301      	movs	r3, #1
 8005be0:	4632      	mov	r2, r6
 8005be2:	4649      	mov	r1, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	47d0      	blx	sl
 8005be8:	3001      	adds	r0, #1
 8005bea:	d09d      	beq.n	8005b28 <_printf_i+0x15c>
 8005bec:	3501      	adds	r5, #1
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	1a5b      	subs	r3, r3, r1
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	dcf2      	bgt.n	8005bde <_printf_i+0x212>
 8005bf8:	e7eb      	b.n	8005bd2 <_printf_i+0x206>
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	f104 0619 	add.w	r6, r4, #25
 8005c00:	e7f5      	b.n	8005bee <_printf_i+0x222>
 8005c02:	bf00      	nop
 8005c04:	08005dd1 	.word	0x08005dd1
 8005c08:	08005de2 	.word	0x08005de2

08005c0c <memmove>:
 8005c0c:	4288      	cmp	r0, r1
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	eb01 0402 	add.w	r4, r1, r2
 8005c14:	d902      	bls.n	8005c1c <memmove+0x10>
 8005c16:	4284      	cmp	r4, r0
 8005c18:	4623      	mov	r3, r4
 8005c1a:	d807      	bhi.n	8005c2c <memmove+0x20>
 8005c1c:	1e43      	subs	r3, r0, #1
 8005c1e:	42a1      	cmp	r1, r4
 8005c20:	d008      	beq.n	8005c34 <memmove+0x28>
 8005c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c2a:	e7f8      	b.n	8005c1e <memmove+0x12>
 8005c2c:	4402      	add	r2, r0
 8005c2e:	4601      	mov	r1, r0
 8005c30:	428a      	cmp	r2, r1
 8005c32:	d100      	bne.n	8005c36 <memmove+0x2a>
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c3e:	e7f7      	b.n	8005c30 <memmove+0x24>

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	@ (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fc f8ac 	bl	8001da8 <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200003f8 	.word	0x200003f8

08005c60 <memcpy>:
 8005c60:	440a      	add	r2, r1
 8005c62:	4291      	cmp	r1, r2
 8005c64:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005c68:	d100      	bne.n	8005c6c <memcpy+0xc>
 8005c6a:	4770      	bx	lr
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c76:	4291      	cmp	r1, r2
 8005c78:	d1f9      	bne.n	8005c6e <memcpy+0xe>
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <_realloc_r>:
 8005c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c80:	4680      	mov	r8, r0
 8005c82:	4615      	mov	r5, r2
 8005c84:	460c      	mov	r4, r1
 8005c86:	b921      	cbnz	r1, 8005c92 <_realloc_r+0x16>
 8005c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	f7ff bc4b 	b.w	8005528 <_malloc_r>
 8005c92:	b92a      	cbnz	r2, 8005ca0 <_realloc_r+0x24>
 8005c94:	f7ff fbdc 	bl	8005450 <_free_r>
 8005c98:	2400      	movs	r4, #0
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca0:	f000 f81a 	bl	8005cd8 <_malloc_usable_size_r>
 8005ca4:	4285      	cmp	r5, r0
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	d802      	bhi.n	8005cb0 <_realloc_r+0x34>
 8005caa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005cae:	d8f4      	bhi.n	8005c9a <_realloc_r+0x1e>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f7ff fc38 	bl	8005528 <_malloc_r>
 8005cb8:	4607      	mov	r7, r0
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d0ec      	beq.n	8005c98 <_realloc_r+0x1c>
 8005cbe:	42b5      	cmp	r5, r6
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	bf28      	it	cs
 8005cc6:	4632      	movcs	r2, r6
 8005cc8:	f7ff ffca 	bl	8005c60 <memcpy>
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4640      	mov	r0, r8
 8005cd0:	f7ff fbbe 	bl	8005450 <_free_r>
 8005cd4:	463c      	mov	r4, r7
 8005cd6:	e7e0      	b.n	8005c9a <_realloc_r+0x1e>

08005cd8 <_malloc_usable_size_r>:
 8005cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cdc:	1f18      	subs	r0, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfbc      	itt	lt
 8005ce2:	580b      	ldrlt	r3, [r1, r0]
 8005ce4:	18c0      	addlt	r0, r0, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
